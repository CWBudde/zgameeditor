
Listing
-------
0 errors and 46 warnings
*****  Warning: LL1 warning in ZcFuncBody:"vec2" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"mat4" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"vec3" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"const" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"vec4" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"xptr" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"int" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"float" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"byte" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"model" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"string" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"if" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"@" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"reinterpret_cast" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"null" is start & successor of deletable structure
*****  Warning: LL1 warning in EmbeddedStatement:"else" is start & successor of deletable structure
*****  Warning: LL1 warning in Zc: contents of [...] or {...} must not be deletable
*****  Warning: LL1 warning in ZcFuncBody:"return" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"while" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"switch" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"for" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"continue" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"break" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:lbrace is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:inc is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:lpar is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:not is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:minus is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:realCon is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:intCon is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:stringCon is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:dec is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:ident is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:scolon is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Font" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Camera" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Sample" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Component" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"File" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Sound" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Material" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Shader" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Mesh" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Bitmap" is start & successor of deletable structure
**************************
    1  COMPILER Zc
    2  
    3  FRAME "delphi.frm"
    4  
    5  uses = (. Zc_Ops, Contnrs, uSymTab, ZClasses, Compiler, SysUtils, ZExpressions, ZApplication .)
    6  
    7  public = (.
    8      ZFunctions : TObjectList;
    9      SymTab : TSymbolTable;
   10      ReturnType : TZcDataType;
   11      AllowFunctions : boolean;
   12      GlobalNames : TObjectList;
   13      TempCounter : integer;
   14      ZApp : TZApplication;
   15      destructor Destroy; override;
   16      procedure CheckHomograph(var sym: Integer); override;
   17  .)
   18  private = (.
   19      IsInIdent,IsInInvokeArg : boolean;
   20      CurrentFunction : TZcOpFunctionUserDefined;
   21      procedure CleanUp;
   22      procedure ZError(const S : string);
   23      procedure AddSwitchLabel(SwitchOp : TZcOpSwitch; var Op: TZcOp);
   24      procedure OnParserError(Sender: TObject; ErrorType,ErrorCode, line,col: Integer; const Msg, data: string);
   25      function IsConst : boolean;
   26      .)
   27  precreate = (.
   28      ZFunctions := TObjectList.Create(False);
   29      Self.OnError := OnParserError;
   30  
   31  .)
   32  
   33  semErrors = (.
   34      200 : Result := 'Not a floating point value';
   35      201 : Result := 'Name already defined in this scope';
   36      202 : Result := 'Return value expected';
   37      203 : Result := 'Function should not return a value';
   38      204 : Result := 'Only function definitions are allowed here';
   39      205 : Result := 'Syntax not supported';
   40  .)
   41  
   42  implementation = (.
   43  
   44  procedure TZc.OnParserError(Sender: TObject; ErrorType,ErrorCode, line,col: Integer; const Msg, data: string);
   45  begin
   46    ZError(Msg + ' ' + Data);
   47  end;
   48  
   49  procedure TZc.CheckHomograph(var sym: Integer);
   50  begin
   51    //Only Homographs are name of component datatypes
   52    //If inside identifier "x.y.z" then let it refer to identifier instead
   53    if IsInIdent or IsInInvokeArg then
   54      sym := identSym;
   55  end;
   56  
   57  destructor TZc.Destroy;
   58  begin
   59    inherited;
   60    CleanUp;
   61  end;
   62  
   63  procedure TZc.AddSwitchLabel(SwitchOp : TZcOpSwitch; var Op: TZcOp);
   64  begin
   65    if Op=nil then
   66    begin
   67      if SwitchOp.HasDefault then
   68        ZError('Only one default statement is allowed.');
   69      SwitchOp.HasDefault := True;
   70    end else
   71      Op := MakeCompatible(Op,SwitchOp.ValueOp.GetDataType);
   72    SwitchOp.CaseOps.Last.Children.Add( Op );
   73    Op := nil;
   74  end;
   75  
   76  procedure TZc.CleanUp;
   77  begin
   78    Zc_Ops.FunctionCleanUps.Clear;
   79    ZFunctions.Free;
   80  end;
   81  
   82  procedure TZc.ZError(const S : string);
   83  var
   84    E : EParseError;
   85    P : TSymbolRec;
   86  begin
   87    E := EParseError.Create(S);
   88    E.Message := S;
   89    Scanner.GetPosition(P);
   90    E.Line := P.Line;
   91    E.Col := P.Col;
   92    if (E.Line<>0) or (E.Col<>0) then
   93      E.Message := E.Message + ' (line: ' + IntToStr(E.Line) + ', col: ' + IntToStr(E.Col) + ')';
   94    raise E;
   95  end;
   96  
   97  function TZc.IsConst : boolean;
   98  begin
   99    Result := (CurrentInputSymbol=constSym) or
  100      ((CurrentInputSymbol=privateSym) and (Symbols[2].Id=constSym));
  101  end;
  102  
  103  .)
  104  
  105  END
  106  
  107  
  108  CHARACTERS
  109  
  110          tab                = CHR(9). /*  9 = tabulator */
  111          eol                = CHR(10). /* 10 = line feed */
  112          cr                 = CHR(13). /* 13 = carriage return */
  113          newLine            = cr + eol. /* Line separator character (U+2028) + Paragraph separator character (U+2029) */
  114  
  115          letter             = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
  116          digit              = "0123456789".
  117          hexDigit           = digit + "ABCDEFabcdef".
  118          notDigit           = ANY - digit.
  119  
  120          char               = ANY - "'" - '\' - newLine.
  121          verbatimStringChar = ANY - '"'.
  122          regularStringChar  = ANY - '"' - '\' - newLine.
  123          notNewLine         = ANY - newLine .
  124  
  125  
  126  TOKENS
  127  
  128    /*--------------------------------------------------------------------------------*/
  129          intCon =
  130                  ( digit {digit}
  131                  | ("0x" | "0X") hexDigit {hexDigit}
  132                  )
  133                  /* ["U" | "u" | "L" | "l" | "UL" | "Ul" | "uL" | "ul" | "LU" | "Lu" | "lU" | "lu"] */
  134                  .
  135    /*--------------------------------------------------------------------------------*/
  136          realCon =
  137                  "." digit {digit}
  138                  [("e" | "E") ["+" | "-"] digit {digit}]
  139                  ["F" | "f" | "D" | "d" | "M" | "m"]
  140          | digit {digit}
  141                  ( "." digit {digit}
  142                          [("e" | "E" ) ["+" | "-"] digit {digit} ]
  143                          ["F" | "f" | "D" | "d" | "M" | "m"]
  144                  | ("e" | "E") ["+" | "-"] digit {digit}
  145                          ["F" | "f" | "D" | "d" | "M" | "m"]
  146                  | "F" | "f" | "D" | "d" | "M" | "m"
  147                  ).
  148    /*--------------------------------------------------------------------------------*/
  149          stringCon =
  150                  '"'    { regularStringChar
  151            | "\'" | '\"' | "\\" | "\n"
  152            }
  153                  '"'.
  154  
  155          ident = letter { letter | digit }.
  156  
  157  
  158          /*----- operators and special characters needed in LL(1) resolvers --------------*/
  159          and    = "&".
  160          assgn  = "=".
  161          colon  = ":".
  162          comma  = ",".
  163          dec    = "--".
  164          div    = "/".
  165          dot    = ".".
  166          eq     = "==".
  167          gt     = ">".
  168          gte    = ">=".
  169          inc    = "++".
  170          lbrace = "{".
  171          lbrack = "[".
  172          lpar   = "(".
  173          lshift = "<<".
  174          lt     = "<".
  175          lte    = "<=".
  176          minus  = "-".
  177          mod    = "%".
  178          neq    = "!=".
  179          not    = "!".
  180          or     = "|".
  181          plus   = "+".
  182          rbrace = "}".
  183          rbrack = "]".
  184          rpar   = ")".
  185          rshift = ">>".
  186          scolon = ";".
  187          tilde  = "~".
  188          times  = "*".
  189          xor    = "^".
  190  
  191  
  192  
  193  COMMENTS FROM "/*" TO "*/"
  194  COMMENTS FROM "//" TO eol
  195  
  196  IGNORE eol + cr + tab
  197  
  198  HOMOGRAPHS
  199    "Material"
  200    "Sound"
  201    "Shader" 
  202    "Bitmap" 
  203    "Mesh"
  204    "Camera" 
  205    "Font"
  206    "Sample"
  207    "File"
  208    "Component"
  209  
  210  PRODUCTIONS
  211  
  212  /*------------------------------------------------------------------------*
  213   *--------------------------- Declarations -------------------------------*
  214   *------------------------------------------------------------------------*/
  215  
  216  ZcFuncRest<Typ : TZcDataType; const Name : string; IsPrivate : boolean>
  217  (.
  218  var
  219    Func : TZcOpFunctionUserDefined;
  220  .)
  221  =
  222       (.
  223          if SymTab.Contains(Name) then
  224            ZError('Name already defined: ' + Name);
  225  
  226          if IsPrivate then
  227            Func := TZcOpFunctionUserDefined.Create(nil)
  228          else
  229            Func := TZcOpFunctionUserDefined.Create(GlobalNames);
  230          Func.Id := Name;
  231          Func.ReturnType := Typ;
  232          if IsPrivate then
  233            SymTab.Add(Func.Id,Func)
  234          else
  235            SymTab.AddPrevious(Func.Id,Func);
  236          ZFunctions.Add(Func);
  237          Self.CurrentFunction := Func;
  238          SymTab.PushScope;
  239          try
  240       .)
  241      [ FormalParams ] ")" "{" ZcFuncBody "}"
  242          (.
  243            finally
  244              SymTab.PopScope;
  245            end;
  246          .)
  247  .
  248  
  249  
  250  Zc (. var
  251          Typ : TZcDataType;
  252          Func : TZcOpFunctionUserDefined;
  253          Name : string;
  254          IsPrivate : boolean;
  255      .)
  256  =
  257    IF (. AllowFunctions .)
***** ^ Warning: Misplaced resolver: no LL(1) conflict
  258    {
  259      IF(. IsConst .)
  260        (. IsPrivate := False; .)
  261        [ "private" (. IsPrivate:= True; .) ]
  262        ConstantDeclarationList<IsPrivate>
  263      |
  264        (. IsPrivate := False; .)
  265        [ "private" (. IsPrivate:= True; .) ]
  266        ("void" (. Typ.Kind := zctVoid; .) | Type<Typ> ) ident (. Name := LexString; .)
  267         /* Need to separate between global variable and method declarations */
  268         (
  269           "(" ZcFuncRest<Typ,Name,IsPrivate>
  270           | GlobalVarDecl<Typ,Name,IsPrivate> ";"
  271         )
  272    }
  273    | IF (. not AllowFunctions .)
***** ^ Warning: Misplaced resolver: no LL(1) conflict
  274    {
  275  
  276    (.
  277         Func := TZcOpFunctionUserDefined.Create(nil);
  278         Func.ReturnType := Self.ReturnType;
  279         Self.CurrentFunction := Func;
  280         try
  281           SymTab.PushScope;
  282           try
  283             ZFunctions.Add(Func);
  284    .)
  285    /* A zc-expression is treated like the body of a nameless function
  286       to allow local var declarations  */
  287  
  288    ZcFuncBody
  289    (.
  290           finally
  291             SymTab.PopScope;
  292           end;
  293         except on E: Exception do
  294           ZError(E.Message);
  295         end;
  296    .)
  297    }
  298  
  299  .
  300  
  301  /*------------------------------------------------------------------------*/
  302  
  303  ZcFuncBody (. var Op : TZcOp; .)
  304  =  {  (. Op:=nil; .)
  305        Statement<Op>
  306        (. if Op<>nil then
  307             CurrentFunction.Statements.Add(Op);
  308           Op := nil;
  309        .)
  310     }
  311  .
  312  
  313  /*------------------------------------------------------------------------*/
  314  FormalParams
  315  = ( Par ["," FormalParams] )
  316  .
  317  /*------------------------------------------------------------------------*/
  318  Par (.
  319  var
  320    Typ : TZcDataType;
  321    Arg : TZcOpArgumentVar;
  322    IsPtr : boolean;
  323  .)
  324  =  (. IsPtr := False; .)
  325    ["ref" (. IsPtr := True; .) ]
  326    Type<Typ> ident
  327       (.
  328          Typ.IsPointer := IsPtr;
  329          if SymTab.ScopeContains(LexString) then
  330            SynError(201)
  331          else
  332          begin
  333            Arg := TZcOpArgumentVar.Create;
  334            Arg.Id := LexString;
  335            Arg.Typ := Typ;
  336            CurrentFunction.AddArgument(Arg);
  337            SymTab.Add(Arg.Id,Arg);
  338          end;
  339       .)
  340  .
  341  /*------------------------------------------------------------------------*/
  342  
  343  LocalVarDecl<var OutOp : TZcOp> (. var Typ : TZcDataType; .)
  344  = (. OutOp := nil; .)
  345    Type<Typ> LocalVar<Typ,OutOp> {"," LocalVar<Typ,OutOp>}
  346  .
  347  
  348  /*------------------------------------------------------------------------*/
  349  
  350  LocalVar<Typ : TZcDataType; var OutOp : TZcOp> (. var Loc : TZcOpLocalVar; InitOp : TZcOp; .)
  351  = ident
  352       (. 
  353          if SymTab.ScopeContains(LexString) then
  354            ZError('Name already defined: ' + LexString);
  355  
  356          Loc := TZcOpLocalVar.Create(nil);
  357          Loc.Id := LexString;
  358          Loc.Typ := Typ;
  359       .)
  360       [ "=" Init<InitOp> (. Loc.InitExpression:=InitOp; .) ]
  361       (.
  362          SymTab.Add(Loc.Id,Loc);
  363          CurrentFunction.AddLocal(Loc);
  364  
  365          if Assigned(Loc.InitExpression) then
  366          begin
  367            //Generate tree for initial assignment
  368            if OutOp=nil then
  369              OutOp := MakeOp(zcBlock);
  370            OutOp.Children.Add( MakeAssign(atAssign, MakeOp(zcIdentifier,Loc.Id),Loc.InitExpression) );
  371          end;
  372  
  373       .)
  374  .
  375  
  376  /*------------------------------------------------------------------------*/
  377  
  378  GlobalVarRest<Typ : TZcDataType; const Name : string; IsPrivate : boolean> (. var V : TDefineVariableBase; .)
  379  =
  380       (.
  381          if SymTab.ScopeContains(Name) then
  382            ZError('Name already defined: ' + Name);
  383  
  384          if Typ.Kind=zctArray then
  385          begin
  386            TDefineArray(Typ.TheArray)._ZApp := Self.ZApp; //must have zapp set to clone
  387            V := TDefineArray(Typ.TheArray).Clone as TDefineVariableBase;
  388            V._ReferenceClassId := Typ.ReferenceClassId;
  389            Self.ZApp.GlobalVars.AddComponent(V);
  390          end
  391          else
  392          begin
  393            V := TDefineVariable.Create(Self.ZApp.GlobalVars);
  394            V._Type := Typ.Kind;
  395            V._ReferenceClassId := Typ.ReferenceClassId;
  396          end;
  397  
  398          V.SetString('Name', AnsiString(Name));
  399          V.DesignerReset; //Needed to init managed variables
  400          if IsPrivate then
  401            SymTab.Add(Name,V)
  402          else
  403            SymTab.AddPrevious(Name,V);
  404       .)
  405  .
  406  
  407  
  408  GlobalVar<Typ : TZcDataType; IsPrivate : boolean>
  409  = ident GlobalVarRest<Typ,LexString,IsPrivate>
  410  .
  411  
  412  GlobalVarDecl<Typ : TZcDataType; const Name : string; IsPrivate : boolean>
  413  = GlobalVarRest<Typ,Name,IsPrivate> {"," GlobalVar<Typ,IsPrivate>}
  414  .
  415  
  416  /*------------------------------------------------------------------------*/
  417  
  418  Init<var OutOp : TZcOp>
  419  = Expr<OutOp>
  420  .
  421  
  422  /*------------------------------------------------------------------------*/
  423  Argument<var OutOp : TZcOp>
  424  = /* ["ref" | "out"] */
  425    (. OutOp := nil; .)
  426    Expr<OutOp>
  427    (. if OutOp=nil then ZError('Missing argument'); .)
  428  .
  429  
  430  /*------------------------------------------------------------------------*
  431   *-------------------------------- Types ---------------------------------*
  432   *------------------------------------------------------------------------*/
  433  
  434  /* Attribute "type" is needed for error messages in EmbeddedStatement     *
  435   * and for array creation expressions                                     */
  436  
  437  
  438  Type<var Typ : TZcDataType>
  439  (.
  440    var
  441      A : TDefineArray;
  442      SizeOp : TZcOp;
  443      I : integer;
  444  .)
  445  =  (. FillChar(Typ,SizeOf(Typ),0); .)
  446    ( SimpleType<Typ> )
  447    {
  448      (
  449        "["       (.
  450                     A := TDefineArray.Create(nil);
  451                     GlobalNames.Add(A);
  452                     A._Type := Typ.Kind;
  453                     Typ.Kind := zctArray;
  454                     Typ.TheArray := A;
  455                  .)
  456  
  457           [ Expr<SizeOp> (.
  458              SizeOp := SizeOp.Optimize;
  459              if SizeOp.Kind<>zcConstLiteral then
  460                ZError('Array size must be a constant expression');
  461              A.SizeDim1 := Trunc( (SizeOp as TZcOpLiteral).Value );
  462                           .)
  463           ]
  464  
  465           { ","  (. if A.Dimensions=High(TArrayDimensions) then ZError('Too many array dimensions'); Inc(A.Dimensions); .)
  466             [ Expr<SizeOp> (.
  467                  SizeOp := SizeOp.Optimize;
  468                  if SizeOp.Kind<>zcConstLiteral then
  469                    ZError('Array size must be a constant expression');
  470                 I := Trunc( (SizeOp as TZcOpLiteral).Value );
  471                 if (A.Dimensions=dadTwo) then A.SizeDim2 := I else A.SizeDim3 := I;
  472             .) ]
  473           }
  474         "]"
  475      )
  476    }
  477  .
  478  
  479  /*------------------------------------------------------------------------*/
  480  
  481  SimpleType<var Typ : TZcDataType>
  482  (.
  483    var
  484      A : TDefineArray;
  485  .)
  486  /* = IntType | "float" | "double" | "decimal" | "bool" */
  487  = "float" (. Typ.Kind := zctFloat; .)
  488    | "int" (. Typ.Kind := zctInt; .)
  489    | "byte" (. Typ.Kind := zctByte; .)
  490    | "string" (. Typ.Kind := zctString; .)
  491    | "model" (. Typ.Kind := zctModel; .)
  492    | "xptr" (. Typ.Kind := zctXptr; .)
  493  
  494    | "mat4" (.
  495       A := Prototypes.Mat4Array;
  496       Typ.Kind := zctMat4;
  497       Typ.TheArray := A;
  498      .)
  499    | "vec2" (.
  500       A := Prototypes.Vec2Array;
  501       Typ.Kind := zctVec2;
  502       Typ.TheArray := A;
  503    .)
  504    | "vec3" (.
  505       A := Prototypes.Vec3Array;
  506       Typ.Kind := zctVec3;
  507       Typ.TheArray := A;
  508    .)
  509    | "vec4" (.
  510       A := Prototypes.Vec4Array;
  511       Typ.Kind := zctVec4;
  512       Typ.TheArray := A;
  513    .)
  514  
  515    /* Changes below also must be made in homographs-section */
  516    | "Material" (. Typ.Kind := zctReference; Typ.ReferenceClassId := MaterialClassId; .)
  517    | "Sound" (. Typ.Kind := zctReference; Typ.ReferenceClassId := SoundClassId; .)
  518    | "Shader" (. Typ.Kind := zctReference; Typ.ReferenceClassId := ShaderClassId; .)
  519    | "Bitmap" (. Typ.Kind := zctReference; Typ.ReferenceClassId := ZBitmapClassId; .)
  520    | "Mesh" (. Typ.Kind := zctReference; Typ.ReferenceClassId := MeshClassId; .)
  521    | "Camera" (. Typ.Kind := zctReference; Typ.ReferenceClassId := CameraClassId; .)
  522    | "Font" (. Typ.Kind := zctReference; Typ.ReferenceClassId := FontClassId; .)
  523    | "Sample" (. Typ.Kind := zctReference; Typ.ReferenceClassId := SampleClassId; .)
  524    | "File" (. Typ.Kind := zctReference; Typ.ReferenceClassId := ZFileClassId; .)
  525    | "Component" (. Typ.Kind := zctReference; Typ.ReferenceClassId := AnyComponentClassId; .)
  526  .
  527  
  528  /*------------------------------------------------------------------------*/
  529  
  530  /* IntType
  531  = "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char"
  532  . */
  533  
  534  
  535  ConstantDeclarationList<IsPrivate : boolean>
  536  (.
  537  var
  538    Typ : TZcDataType;
  539  .)
  540  = "const" Type<Typ> ConstantDeclaration<Typ,IsPrivate> {"," ConstantDeclaration<Typ,IsPrivate> }
  541    ";"
  542  .
  543  
  544  ConstantDeclaration<var Typ : TZcDataType; IsPrivate : boolean>
  545  (.
  546  var
  547    Cns : TDefineConstant;
  548    Op : TZcOp;
  549    Lit : TZcOpLiteral;
  550    CnsName : string;
  551  .)
  552  =
  553  ident (. CnsName := LexString; .) "=" Expr<Op>
  554    (.
  555     if not (Typ.Kind in [zctByte,zctInt,zctFloat,zctString]) then
  556       ZError('Only byte, int, float and string constants are allowed');
  557  
  558     Op := Op.Optimize;
  559     if not (Op is TZcOpLiteral) then
  560       ZError('Constant expression expected: ' + Op.ToString);
  561  
  562     Lit := Op as TZcOpLiteral;
  563  
  564     if (Lit.Typ.Kind<>Typ.Kind) and not ((Typ.Kind=zctByte) and (Lit.Typ.Kind=zctInt))then
  565       ZError('Constant expression is not of the expected type: ' + Op.ToString);
  566  
  567     Cns := TDefineConstant.Create(nil);
  568     Cns.SetString('Name',AnsiString(CnsName));
  569     GlobalNames.Add(Cns);
  570  
  571     case Typ.Kind of
  572       zctByte:
  573         begin
  574           Cns._Type := zctByte;
  575           Cns.ByteValue := Round(Lit.Value);
  576         end;
  577       zctInt:
  578         begin
  579           Cns._Type := zctInt;
  580           Cns.IntValue := Round(Lit.Value);
  581         end;
  582       zctFloat:
  583         begin
  584           Cns._Type := zctFloat;
  585           Cns.Value := Lit.Value;
  586         end;
  587       zctString:
  588         begin
  589           Cns._Type := zctString;
  590           Cns.SetString('StringValue',AnsiString(Lit.StringValue));
  591         end;
  592       else
  593         ZError('Wrong type of constant expression: ' + GetZcTypeName(Typ));
  594     end;
  595     if IsPrivate then
  596       SymTab.Add(CnsName,Cns)
  597     else
  598       SymTab.AddPrevious(CnsName,Cns)
  599    .)
  600  /* {"," ident "=" Expr<Op>} */
  601  .
  602  
  603  /*------------------------------------------------------------------------*
  604   *------------------------------ Statements ------------------------------*
  605   *------------------------------------------------------------------------*/
  606  
  607  Statement<var OutOp : TZcOp>
  608  = (. OutOp := nil; .)
  609  
  610  ConstantDeclarationList<false>
  611  
  612  /*IF IsLocalVarDecl THEN
  613  BEGIN
  614    LocalVarDecl ";"
  615  END
  616  |  EmbeddedStatement<OutOp> */
  617  
  618  | LocalVarDecl<OutOp> ";"
  619  | EmbeddedStatement<OutOp>
  620    /* LL(1) confict between LocalVarDecl and StatementExpr: *
  621     * ident {"." ident} { "[" ...                           */
  622  .
  623  
  624  /*------------------------------------------------------------------------*/
  625  EmbeddedStatement<var OutOp : TZcOp>
  626    (. var
  627         SwitchValueOp,Op,IfOp,IfBody,ElseOp : TZcOp;
  628         ForInitOp,ForCondOp,ForIncOp,ForBodyOp : TZcOp;
  629         WhileCondOp,WhileBodyOp : TZcOp;
  630         SwitchOp : TZcOpSwitch;
  631         Loc : TZcOpLocalVar;
  632    .)
  633  = Block<OutOp>
  634  | ";"   (. OutOp := MakeOp(zcNop); .)
  635  | StatementExpr<OutOp> ";"
  636  | "if" (. ElseOp := nil; .)
  637    "(" Expr<IfOp> ")" EmbeddedStatement<IfBody> ["else" EmbeddedStatement<ElseOp>]
  638          (. OutOp := MakeOp(zcIf,[IfOp,IfBody,ElseOp]); .)
  639   | "switch" "(" Expr<SwitchValueOp> ")"
  640        (.
  641           Loc := MakeTemp(SwitchValueOp.GetDataType.Kind);
  642           SymTab.Add(Loc.Id,Loc);
  643           CurrentFunction.AddLocal(Loc);
  644  
  645           OutOp := MakeOp(zcBlock);
  646           OutOp.Children.Add( MakeAssign(atAssign, MakeOp(zcIdentifier,Loc.Id),SwitchValueOp) );
  647  
  648           SwitchOp := TZcOpSwitch.Create(nil);
  649           SwitchOp.ValueOp := MakeIdentifier(Loc.Id);
  650           OutOp.Children.Add(SwitchOp);
  651        .)
  652     "{" {
  653       (. SwitchOp.CaseOps.Add( MakeOp(zcNop) ); SwitchOp.StatementsOps.Add( MakeOp(zcNop) ); .)
  654       SwitchSection<SwitchOp>
  655     } "}"
  656   | "while"
  657       (. try
  658           SymTab.PushScope;
  659           WhileCondOp := nil; WhileBodyOp := nil; .)
  660     "(" Expr<WhileCondOp> ")" EmbeddedStatement<WhileBodyOp>
  661     (.
  662           OutOp := MakeOp(zcWhile,[WhileCondOp,WhileBodyOp]);
  663         finally
  664           SymTab.PopScope;
  665         end;
  666     .)
  667   /* | "do" EmbeddedStatement<Op> "while" "(" Expr<Op> ")" ";" */
  668   | "for"
  669      (. try
  670           SymTab.PushScope;
  671           ForInitOp :=nil; ForCondOp := nil; ForIncOp := nil; .)
  672     "(" [ForInit<ForInitOp>] ";" [Expr<ForCondOp>] ";" [ForInc<ForIncOp>] ")" EmbeddedStatement<ForBodyOp>
  673     (.
  674           OutOp := MakeOp(zcForLoop,[ForInitOp,ForCondOp,ForIncOp,ForBodyOp]);
  675         finally
  676           SymTab.PopScope;
  677         end;
  678     .)
  679  /* | "foreach" "(" Type ident "in" Expr<Op> ")" EmbeddedStatement<Op> */
  680   | "break" ";"    (. OutOp := MakeOp(zcBreak); .)
  681   | "continue" ";" (. OutOp := MakeOp(zcContinue); .)
  682   | (. Op := nil; .) "return" [ Expr<Op> ] ";"
  683      (.
  684          if (Op=nil) then
  685          begin
  686            if CurrentFunction.ReturnType.Kind<>zctVoid then
  687              SynError(202)
  688            else
  689              OutOp := MakeOp(zcReturn);
  690          end else
  691          begin
  692            if CurrentFunction.ReturnType.Kind=zctVoid then
  693              SynError(203)
  694            else
  695              OutOp := MakeOp(zcReturn,[ MakeCompatible(Op,CurrentFunction.ReturnType) ]);
  696          end;
  697      .)
  698  .
  699  /*------------------------------------------------------------------------*/
  700  
  701  Block<var OutOp : TZcOp>
  702    (. var
  703         Op : TZcOp;
  704    .)
  705  = (. Op := nil;
  706       OutOp := MakeOp(zcBlock);
  707    .)
  708    "{" {Statement<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) } "}".
  709  
  710  /*------------------------------------------------------------------------*/
  711  StatementExpr<var OutOp : TZcOp>           (. var Op1,Op2 : TZcOp; Kind : TZcAssignType; .)
  712  = (. Op1 :=nil; Op2 := nil; .)
  713    Unary<Op1>
  714    ( AssignOp<Kind> Expr<Op2>
  715      (.
  716        if Op2<>nil then
  717          OutOp := MakeAssign(Kind,Op1,Op2);
  718      .)
  719    |                             (. OutOp := Op1; .)
  720    )
  721  .
  722  
  723  /*------------------------------------------------------------------------*/
  724  AssignOp<var Kind : TZcAssignType>
  725  = "="     (. Kind := atAssign; .)
  726    | "+="  (. Kind := atPlusAssign; .)
  727    | "-="  (. Kind := atMinusAssign; .)
  728    | "*="  (. Kind := atMulAssign; .)
  729    | "/="  (. Kind := atDivAssign; .)
  730  /*  | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" */
  731  .
  732  
  733  /*------------------------------------------------------------------------*/
  734  
  735  SwitchSection<SwitchOp : TZcOpSwitch> (. var Op : TZcOp; .)
  736  = (. Op := nil; .)
  737    SwitchLabel<Op>   (. AddSwitchLabel(SwitchOp,Op); .)
  738    {
  739      SwitchLabel<Op> (. AddSwitchLabel(SwitchOp,Op); .)
  740    }
  741    Statement<Op>    (. if Assigned(Op) then SwitchOp.StatementsOps.Last.Children.Add(Op); .)
  742    {
  743       Statement<Op> (. if Assigned(Op) then SwitchOp.StatementsOps.Last.Children.Add(Op); .)
  744    }
  745  .
  746  
  747  /*------------------------------------------------------------------------*/
  748  
  749  SwitchLabel<var OutOp : TZcOp>
  750  = "case" Expr<OutOp> ":"
  751  | "default" ":"
  752  .
  753  
  754  /*------------------------------------------------------------------------*/
  755  
  756  ForInit<var OutOp : TZcOp>     (. var Op : TZcOp; .)
  757  = (. Op:=nil; OutOp := MakeOp(zcBlock); .)
  758  (
  759  LocalVarDecl<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .)
  760  | (. Op:=nil; .) StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .)
  761    { (. Op:=nil; .) "," StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) }
  762  )
  763  .  
  764  
  765  /*------------------------------------------------------------------------*/
  766  
  767  ForInc<var OutOp : TZcOp>      (. var Op : TZcOp; .)
  768  = (. Op:=nil; 
  769       OutOp := MakeOp(zcBlock);
  770    .) 
  771  (
  772  StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) 
  773  { (. Op:=nil; .) "," StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) }
  774  )
  775  . 
  776  
  777  
  778  /*------------------------------------------------------------------------*
  779   *----------------------------- Expressions ------------------------------*
  780   *------------------------------------------------------------------------*/
  781  
  782  
  783  Expr<var OutOp : TZcOp>   (. var Op1,Op2 : TZcOp; Kind : TZcAssignType; .)
  784  = (. Op1 :=nil; Op2 := nil; .)
  785    Unary<Op1>
  786    ( OrExpr<Op1,OutOp>
  787        ["?" Expr<Op1> ":" Expr<Op2>
  788           (. if (OutOp=nil) or (Op1=nil) or (Op2=nil) then
  789                SynError(205)
  790              else
  791                OutOp := MakeOp(zcConditional,[OutOp,Op1, MakeCompatible(Op2,Op1.GetDataType) ]);
  792           .)
  793        ]
  794    | AssignOp<Kind> Expr<Op2>    (. OutOp := MakeAssign(Kind,Op1, Op2); .)
  795    )
  796  .
  797  /*------------------------------------------------------------------------*/
  798  OrExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  799  = AndExpr<InOp,OutOp>   (. L := OutOp; .)
  800      {"||" Unary<Op> AndExpr<Op,R>
  801        (. OutOp := MakeOp(zcOr,[L,R]);
  802           L := OutOp; .)
  803      }
  804  .
  805  
  806  
  807  /*------------------------------------------------------------------------*/
  808  AndExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  809  = BitOrExpr<InOp,OutOp>  (. L := OutOp; .)
  810      {"&&" Unary<Op> BitOrExpr<Op,R>
  811        (. OutOp := MakeOp(zcAnd,[L,R]);
  812           L := OutOp; .)
  813      }
  814  .
  815  /*------------------------------------------------------------------------*/
  816  BitOrExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  817  = BitXorExpr<InOp,OutOp> (. L := OutOp; .)
  818    {"|" Unary<Op> BitXorExpr<Op,R>
  819      (. OutOp := MakeOp(zcBinaryOr,[L,R]);
  820         L := OutOp; .)
  821    }
  822  .
  823  
  824  /*------------------------------------------------------------------------*/
  825  BitXorExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  826  = BitAndExpr<InOp,OutOp> (. L := OutOp; .)
  827    {"^" Unary<Op> BitAndExpr<Op,R>
  828      (. OutOp := MakeOp(zcBinaryXor,[L,R]);
  829         L := OutOp; .)
  830    }
  831  .
  832  
  833  /*------------------------------------------------------------------------*/
  834  BitAndExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  835  = EqlExpr<InOp,OutOp> (. L := OutOp; .)
  836    {"&" Unary<Op> EqlExpr<Op,R>
  837      (. OutOp := MakeOp(zcBinaryAnd,[L,R]);
  838         L := OutOp; .)
  839    }
  840  .
  841  
  842  /*------------------------------------------------------------------------*/
  843  EqlExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; Kind : TZcOpKind; .)
  844  = RelExpr<InOp,OutOp> (. L := OutOp; Kind := zcNop; .)
  845    {( "!="   (. Kind := zcCompNE; .)
  846     | "=="   (. Kind := zcCompEQ; .)
  847     )
  848     Unary<Op> RelExpr<Op,R>
  849           (. OutOp := MakeBinary(Kind, L,R);
  850              L := OutOp;
  851           .)
  852    }
  853  .
  854  /*------------------------------------------------------------------------*/
  855  RelExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp;  Kind : TZcOpKind; .)
  856  = ShiftExpr<InOp,OutOp> (. L := OutOp; Kind := zcNop; .)
  857    { ( "<"       (. Kind := zcCompLT; .)
  858      | ">"       (. Kind := zcCompGT; .)
  859      | "<="      (. Kind := zcCompLE; .)
  860      | ">="      (. Kind := zcCompGE; .)
  861       )
  862      Unary<Op> ShiftExpr<Op,R>
  863           (. OutOp := MakeBinary(Kind, L,R );
  864              L := OutOp;
  865           .)
  866    }
  867  .
  868  /*------------------------------------------------------------------------*/
  869  ShiftExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; Kind : TZcOpKind; .)
  870  = AddExpr<InOp,OutOp> (. L := OutOp; Kind := zcNop; .)
  871    { ("<<"  (. Kind := zcBinaryShiftL; .)
  872      | ">>" (. Kind := zcBinaryShiftR; .)
  873      )
  874      Unary<Op> AddExpr<Op,R>
  875      (. OutOp := MakeOp(Kind,[L,R]);
  876         L := OutOp; .)
  877    }
  878  .
  879  /*------------------------------------------------------------------------*/
  880  AddExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp;  Kind : TZcOpKind;.)
  881  = MulExpr<InOp,OutOp>   (. L := OutOp; Kind := zcNop; .)
  882      {( "+"    (. Kind := zcPlus; .)
  883       | "-"    (. Kind := zcMinus; .)
  884       ) Unary<Op> MulExpr<Op,R>
  885           (. 
  886              if (L=nil) or (R=nil) then
  887                ZError('Invalid syntax');
  888              OutOp := MakeBinary(Kind,L,R);
  889              L := OutOp;
  890           .)
  891      }
  892  .
  893  /*------------------------------------------------------------------------*/
  894  MulExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Tmp : TZcOp; Kind : TZcOpKind; .)
  895  = (. OutOp := InOp; Kind := zcNop; .)
  896    { ("*"      (. Kind := zcMul; .)
  897      | "/"     (. Kind := zcDiv; .)
  898      | "%"     (. Kind := zcMod; .)
  899      ) Unary<Tmp>
  900           (. OutOp := MakeBinary(Kind,InOp,Tmp);
  901              InOp := OutOp;
  902           .)
  903      }
  904  .
  905  /*------------------------------------------------------------------------*/
  906  Unary<var OutOp : TZcOp>         (. var LastOp,Tmp : TZcOp; Kind : TZcOpKind; .)
  907  =       (. LastOp := nil; Kind := zcNop; .)
  908    {
  909      (
  910        /* "+" | */
  911        "-"   (. Kind := zcNegate; .) |
  912        "++"  (. Kind := zcPreInc; .) |    
  913        "--"  (. Kind := zcPreDec; .) |
  914        "!"   (. Kind := zcNot; .)
  915        /* | "~" | "*" */
  916      )
  917      (.
  918         if Kind in [zcNegate,zcNot] then
  919         begin
  920           Tmp := MakeOp(Kind);
  921           if LastOp<>nil then
  922             LastOp.Children.Add(Tmp);
  923           LastOp := Tmp;
  924         end else if Assigned(LastOp) then
  925           ZError('-- and ++ cannot be combined with other unary ops');
  926      .)
  927    }
  928    Primary<Tmp>
  929      (.
  930         if Kind in [zcNop,zcNegate,zcNot] then
  931         begin
  932           if LastOp<>nil then
  933           begin
  934             LastOp.Children.Add(Tmp);
  935             OutOp := LastOp;
  936           end else
  937             OutOp := Tmp;
  938         end else
  939         begin
  940           OutOp := MakePrePostIncDec(Kind,Tmp);
  941         end;
  942      .)
  943  .
  944  
  945  
  946  
  947  /*------------------------------------------------------------------------*/
  948  InvokeArgument<var OutOp : TZcOp; Ci : TZComponentInfo>
  949  (.
  950    var
  951      Op : TZcOp;
  952      Prop : TZProperty;
  953  .)
  954  = (. OutOp := nil; Op := nil; .)
  955    ident (.
  956      Prop := Ci.GetProperties.GetByName(LexString);
  957      if Prop=nil then
  958        ZError(LexString + ' is not a property of ' + Ci.ZClassName);
  959      if not (Prop.PropertyType in [zptFloat,zptInteger,zptByte,zptBoolean,zptString,zptComponentRef]) then
  960        ZError(LexString + ' property of ' + Ci.ZClassName + ' is of a datatype that cannot be set using inline component invokation syntax');
  961      OutOp := MakeOp(zcIdentifier);
  962      OutOp.Id := LexString;
  963    .)
  964    ":" Expr<Op>
  965    (. if Op=nil then
  966         ZError('Missing argument');
  967       Op := MakeCompatible(Op, PropTypeToZType(Prop.PropertyType));
  968       OutOp.Children.Add(Op);
  969    .)
  970  .
  971  
  972  
  973  /*------------------------------------------------------------------------*/
  974  ReinterpretCast<var OutOp : TZcOp>
  975  (.
  976  var
  977    Op : TZcOp;
  978    Typ : TZcDataType;
  979  .)
  980  = "reinterpret_cast" "<" SimpleType<Typ> ">"
  981    "(" Expr<Op> ")"
  982    (.
  983       OutOp := TZcOpReinterpretCast.Create(nil);
  984       OutOp.Children.Add(Op);
  985       (OutOp as TZcOpReinterpretCast).Typ := Typ;
  986    .)
  987  .
  988  
  989  /*------------------------------------------------------------------------*/
  990  InlineComponent<var OutOp : TZcOp>
  991  (. var Op : TZcOp;
  992       Ci : TZComponentInfo;
  993  .)
  994  =  (. OutOp := nil;
  995        IsInInvokeArg := True;
  996     .)
  997     "@" ident (.
  998         Ci := ComponentManager.GetInfoFromName(LexString);
  999         OutOp := TZcOpInvokeComponent.Create(nil);
 1000         OutOp.Id := LexString;
 1001      .)
 1002      "("
 1003          [InvokeArgument<Op,Ci>       (. OutOp.Children.Add(Op); .)
 1004            {"," InvokeArgument<Op,Ci> (. OutOp.Children.Add(Op); .)
 1005            }
 1006          ]
 1007      ")" (. IsInInvokeArg := False; .)
 1008  .
 1009  
 1010  /*------------------------------------------------------------------------*/
 1011  Primary<var OutOp : TZcOp>
 1012  (. var Op : TZcOp; S : string; V : double;
 1013       Typ : TZcDataType;
 1014  .)
 1015  =            (. OutOp := nil; .)
 1016    (
 1017      ident    (. OutOp := CheckPrimary( MakeIdentifier(LexString) );  .)
 1018    | InlineComponent<OutOp>
 1019    | Literal<Typ>  (.
 1020          if Typ.Kind in [zctString,zctNull] then
 1021            OutOp := TZcOpLiteral.Create(Typ.Kind,LexString)
 1022          else
 1023          begin
 1024            try
 1025              S := LexString;
 1026              V := ZcStrToFloat(S);
 1027              OutOp := TZcOpLiteral.Create(Typ.Kind,V)
 1028            except on EConvertError do
 1029              SynError(200);
 1030            end;
 1031          end;
 1032       .)
 1033    | "(" Expr<OutOp> ")"
 1034  /*  | ( "bool"   | "byte"   | "char" | "decimal" | "double"
 1035      | "float"  | "int"    | "long" | "object"  | "sbyte"
 1036      | "short"  | "string" | "uint" | "ulong"   | "ushort"
 1037      ) "." ident */
 1038    | ReinterpretCast<OutOp>
 1039    )
 1040  
 1041    {
 1042    "++" (. OutOp := MakePrePostIncDec(zcPostInc,OutOp); .)
 1043    | "--" (. OutOp := MakePrePostIncDec(zcPostDec,OutOp); .)
 1044  
 1045  /*  | "->" ident */
 1046  
 1047    | "." (. IsInIdent := True; .) ident (.
 1048  
 1049        if not (OutOp.Kind in [zcIdentifier,zcSelect,zcFuncCall,zcArrayAccess]) then
 1050          ZError('Invalid use of "."');
 1051  
 1052        Op := MakeOp(zcSelect,LexString);
 1053        Op.Children.Add(OutOp);
 1054  
 1055        OutOp := CheckPrimary(Op);
 1056  
 1057        IsInIdent := False;
 1058  
 1059      .)
 1060  
 1061    | "(" (.
 1062             if (OutOp=nil) or (OutOp.Kind<>zcIdentifier) then
 1063               ZError('Unexpected "("');
 1064             OutOp.Kind:=zcFuncCall;
 1065           .)
 1066          [Argument<Op> (. OutOp.Children.Add(Op); .)
 1067            {"," Argument<Op> (. OutOp.Children.Add(Op); .)
 1068            }
 1069          ]
 1070          (.
 1071             if not VerifyFunctionCall(OutOp,S) then
 1072               ZError(S);
 1073          .)
 1074      ")"
 1075  
 1076    | "[" (.
 1077             if (OutOp=nil) or (not (OutOp.Kind in [zcIdentifier,zcSelect,zcArrayAccess,zcFuncCall])) then
 1078               ZError('Unexpected "["');
 1079             Op := MakeArrayAccess(OutOp);
 1080             OutOp := Op;
 1081           .)
 1082  
 1083          Expr<Op> (. OutOp.Children.Add( MakeCompatible(Op,zctInt) ); .)
 1084            {"," Expr<Op> (. OutOp.Children.Add( MakeCompatible(Op,zctInt) ); .) }
 1085          "]"
 1086    }
 1087  .
 1088  /*------------------------------------------------------------------------*/
 1089  Literal<var Typ : TZcDataType>
 1090  = intCon (. Typ.Kind :=zctInt; .) |
 1091    realCon (. Typ.Kind := zctFloat; .) |
 1092    stringCon (. Typ.Kind := zctString; .)
 1093    | "null" (. Typ.Kind := zctNull; .)
 1094    /* | "true" | "false"  */
 1095  .
 1096  
 1097  END Zc.



