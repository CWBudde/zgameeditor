
Listing
-------
0 errors and 46 warnings
*****  Warning: LL1 warning in ZcFuncBody:"vec2" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"mat4" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"vec3" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"const" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"vec4" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"xptr" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"int" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"float" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"byte" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"model" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"string" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"if" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"@" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"reinterpret_cast" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"null" is start & successor of deletable structure
*****  Warning: LL1 warning in EmbeddedStatement:"else" is start & successor of deletable structure
*****  Warning: LL1 warning in Zc: contents of [...] or {...} must not be deletable
*****  Warning: LL1 warning in ZcFuncBody:"return" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"while" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"switch" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"for" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"continue" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"break" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:lbrace is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:inc is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:lpar is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:not is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:minus is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:realCon is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:intCon is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:stringCon is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:dec is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:ident is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:scolon is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Font" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Camera" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Sample" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Component" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"File" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Sound" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Material" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Shader" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Mesh" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Bitmap" is start & successor of deletable structure
**************************
    1  COMPILER Zc
    2  
    3  FRAME "delphi.frm"
    4  
    5  uses = (. Zc_Ops, Contnrs, uSymTab, ZClasses, Compiler, SysUtils, ZExpressions, ZApplication .)
    6  
    7  public = (.
    8      ZFunctions : TObjectList;
    9      SymTab : TSymbolTable;
   10      ReturnType : TZcDataType;
   11      AllowFunctions : boolean;
   12      GlobalNames : TObjectList;
   13      TempCounter : integer;
   14      ZApp : TZApplication;
   15      destructor Destroy; override;
   16      procedure CheckHomograph(var sym: Integer); override;
   17  .)
   18  private = (.
   19      IsInIdent,IsInInvokeArg : boolean;
   20      CurrentFunction : TZcOpFunctionUserDefined;
   21      procedure CleanUp;
   22      procedure ZError(const S : string);
   23      procedure AddSwitchLabel(SwitchOp : TZcOpSwitch; var Op: TZcOp);
   24      procedure OnParserError(Sender: TObject; ErrorType,ErrorCode, line,col: Integer; const Msg, data: string);
   25      function IsConst : boolean;
   26      .)
   27  precreate = (.
   28      ZFunctions := TObjectList.Create(False);
   29      Self.OnError := OnParserError;
   30  
   31  .)
   32  
   33  semErrors = (.
   34      200 : Result := 'Not a floating point value';
   35      201 : Result := 'Name already defined in this scope';
   36      202 : Result := 'Return value expected';
   37      203 : Result := 'Function should not return a value';
   38      204 : Result := 'Only function definitions are allowed here';
   39      205 : Result := 'Syntax not supported';
   40  .)
   41  
   42  implementation = (.
   43  
   44  procedure TZc.OnParserError(Sender: TObject; ErrorType,ErrorCode, line,col: Integer; const Msg, data: string);
   45  begin
   46    ZError(Msg + ' ' + Data);
   47  end;
   48  
   49  procedure TZc.CheckHomograph(var sym: Integer);
   50  begin
   51    //Only Homographs are name of component datatypes
   52    //If inside identifier "x.y.z" then let it refer to identifier instead
   53    if IsInIdent or IsInInvokeArg then
   54      sym := identSym;
   55  end;
   56  
   57  destructor TZc.Destroy;
   58  begin
   59    inherited;
   60    CleanUp;
   61  end;
   62  
   63  procedure TZc.AddSwitchLabel(SwitchOp : TZcOpSwitch; var Op: TZcOp);
   64  begin
   65    if Op=nil then
   66    begin
   67      if SwitchOp.HasDefault then
   68        ZError('Only one default statement is allowed.');
   69      SwitchOp.HasDefault := True;
   70    end else
   71      Op := MakeCompatible(Op,SwitchOp.ValueOp.GetDataType);
   72    SwitchOp.CaseOps.Last.Children.Add( Op );
   73    Op := nil;
   74  end;
   75  
   76  procedure TZc.CleanUp;
   77  begin
   78    Zc_Ops.FunctionCleanUps.Clear;
   79    ZFunctions.Free;
   80  end;
   81  
   82  procedure TZc.ZError(const S : string);
   83  var
   84    E : EParseError;
   85    P : TSymbolRec;
   86  begin
   87    E := EParseError.Create(S);
   88    E.Message := S;
   89    Scanner.GetPosition(P);
   90    E.Line := P.Line;
   91    E.Col := P.Col;
   92    if (E.Line<>0) or (E.Col<>0) then
   93      E.Message := E.Message + ' (line: ' + IntToStr(E.Line) + ', col: ' + IntToStr(E.Col) + ')';
   94    raise E;
   95  end;
   96  
   97  function TZc.IsConst : boolean;
   98  begin
   99    Result := (CurrentInputSymbol=constSym) or
  100      ((CurrentInputSymbol=privateSym) and (Symbols[2].Id=constSym));
  101  end;
  102  
  103  .)
  104  
  105  END
  106  
  107  
  108  CHARACTERS
  109  
  110          tab                = CHR(9). /*  9 = tabulator */
  111          eol                = CHR(10). /* 10 = line feed */
  112          cr                 = CHR(13). /* 13 = carriage return */
  113          newLine            = cr + eol. /* Line separator character (U+2028) + Paragraph separator character (U+2029) */
  114  
  115          letter             = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
  116          digit              = "0123456789".
  117          hexDigit           = digit + "ABCDEFabcdef".
  118          notDigit           = ANY - digit.
  119  
  120          char               = ANY - "'" - '\' - newLine.
  121          verbatimStringChar = ANY - '"'.
  122          regularStringChar  = ANY - '"' - '\' - newLine.
  123          notNewLine         = ANY - newLine .
  124  
  125  
  126  TOKENS
  127  
  128    /*--------------------------------------------------------------------------------*/
  129          intCon =
  130                  ( digit {digit}
  131                  | ("0x" | "0X") hexDigit {hexDigit}
  132                  )
  133                  /* ["U" | "u" | "L" | "l" | "UL" | "Ul" | "uL" | "ul" | "LU" | "Lu" | "lU" | "lu"] */
  134                  .
  135    /*--------------------------------------------------------------------------------*/
  136          realCon =
  137                  "." digit {digit}
  138                  [("e" | "E") ["+" | "-"] digit {digit}]
  139                  ["F" | "f" | "D" | "d" | "M" | "m"]
  140          | digit {digit}
  141                  ( "." digit {digit}
  142                          [("e" | "E" ) ["+" | "-"] digit {digit} ]
  143                          ["F" | "f" | "D" | "d" | "M" | "m"]
  144                  | ("e" | "E") ["+" | "-"] digit {digit}
  145                          ["F" | "f" | "D" | "d" | "M" | "m"]
  146                  | "F" | "f" | "D" | "d" | "M" | "m"
  147                  ).
  148    /*--------------------------------------------------------------------------------*/
  149          stringCon =
  150                  '"'    { regularStringChar
  151            | "\'" | '\"' | "\\" | "\n"
  152            }
  153                  '"'.
  154  
  155          ident = letter { letter | digit }.
  156  
  157  
  158          /*----- operators and special characters needed in LL(1) resolvers --------------*/
  159          and    = "&".
  160          assgn  = "=".
  161          colon  = ":".
  162          comma  = ",".
  163          dec    = "--".
  164          div    = "/".
  165          dot    = ".".
  166          eq     = "==".
  167          gt     = ">".
  168          gte    = ">=".
  169          inc    = "++".
  170          lbrace = "{".
  171          lbrack = "[".
  172          lpar   = "(".
  173          lshift = "<<".
  174          lt     = "<".
  175          lte    = "<=".
  176          minus  = "-".
  177          mod    = "%".
  178          neq    = "!=".
  179          not    = "!".
  180          or     = "|".
  181          plus   = "+".
  182          rbrace = "}".
  183          rbrack = "]".
  184          rpar   = ")".
  185          rshift = ">>".
  186          scolon = ";".
  187          tilde  = "~".
  188          times  = "*".
  189          xor    = "^".
  190  
  191  
  192  
  193  COMMENTS FROM "/*" TO "*/"
  194  COMMENTS FROM "//" TO eol
  195  
  196  IGNORE eol + cr + tab
  197  
  198  HOMOGRAPHS
  199    "Material"
  200    "Sound"
  201    "Shader" 
  202    "Bitmap" 
  203    "Mesh"
  204    "Camera" 
  205    "Font"
  206    "Sample"
  207    "File"
  208    "Component"
  209  
  210  PRODUCTIONS
  211  
  212  /*------------------------------------------------------------------------*
  213   *--------------------------- Declarations -------------------------------*
  214   *------------------------------------------------------------------------*/
  215  
  216  ZcFuncRest<Typ : TZcDataType; const Name : string; IsPrivate : boolean>
  217  (.
  218  var
  219    Func : TZcOpFunctionUserDefined;
  220  .)
  221  =
  222       (.
  223          if SymTab.Contains(Name) then
  224            ZError('Name already defined: ' + Name);
  225  
  226          if IsPrivate then
  227            Func := TZcOpFunctionUserDefined.Create(nil)
  228          else
  229            Func := TZcOpFunctionUserDefined.Create(GlobalNames);
  230          Func.Id := Name;
  231          Func.ReturnType := Typ;
  232          if IsPrivate then
  233            SymTab.Add(Func.Id,Func)
  234          else
  235            SymTab.AddPrevious(Func.Id,Func);
  236          ZFunctions.Add(Func);
  237          Self.CurrentFunction := Func;
  238          SymTab.PushScope;
  239          try
  240       .)
  241      [ FormalParams ] ")" "{" ZcFuncBody "}"
  242          (.
  243            finally
  244              SymTab.PopScope;
  245            end;
  246          .)
  247  .
  248  
  249  
  250  Zc (. var
  251          Typ : TZcDataType;
  252          Func : TZcOpFunctionUserDefined;
  253          Name : string;
  254          IsPrivate : boolean;
  255      .)
  256  =
  257    IF (. AllowFunctions .)
***** ^ Warning: Misplaced resolver: no LL(1) conflict
  258    {
  259      IF(. IsConst .)
  260        (. IsPrivate := False; .)
  261        [ "private" (. IsPrivate:= True; .) ]
  262        ConstantDeclarationList<IsPrivate>
  263      |
  264        (. IsPrivate := False; .)
  265        [ "private" (. IsPrivate:= True; .) ]
  266        ("void" (. Typ.Kind := zctVoid; .) | Type<Typ> ) ident (. Name := LexString; .)
  267         /* Need to separate between global variable and method declarations */
  268         (
  269           "(" ZcFuncRest<Typ,Name,IsPrivate>
  270           | GlobalVarDecl<Typ,Name,IsPrivate> ";"
  271         )
  272    }
  273    | IF (. not AllowFunctions .)
***** ^ Warning: Misplaced resolver: no LL(1) conflict
  274    {
  275  
  276    (.
  277         Func := TZcOpFunctionUserDefined.Create(nil);
  278         Func.ReturnType := Self.ReturnType;
  279         Self.CurrentFunction := Func;
  280         try
  281           SymTab.PushScope;
  282           try
  283             ZFunctions.Add(Func);
  284    .)
  285    /* A zc-expression is treated like the body of a nameless function
  286       to allow local var declarations  */
  287  
  288    ZcFuncBody
  289    (.
  290           finally
  291             SymTab.PopScope;
  292           end;
  293         except on E: Exception do
  294           ZError(E.Message);
  295         end;
  296    .)
  297    }
  298  
  299  .
  300  
  301  /*------------------------------------------------------------------------*/
  302  
  303  ZcFuncBody (. var Op : TZcOp; .)
  304  =  {  (. Op:=nil; .)
  305        Statement<Op>
  306        (. if Op<>nil then
  307             CurrentFunction.Statements.Add(Op);
  308           Op := nil;
  309        .)
  310     }
  311  .
  312  
  313  /*------------------------------------------------------------------------*/
  314  FormalParams
  315  = ( Par ["," FormalParams] )
  316  .
  317  /*------------------------------------------------------------------------*/
  318  Par (.
  319  var
  320    Typ : TZcDataType;
  321    Arg : TZcOpArgumentVar;
  322    IsPtr : boolean;
  323  .)
  324  =  (. IsPtr := False; .)
  325    ["ref" (. IsPtr := True; .) ]
  326    Type<Typ> ident
  327       (.
  328          Typ.IsPointer := IsPtr;
  329          if SymTab.ScopeContains(LexString) then
  330            SynError(201)
  331          else
  332          begin
  333            Arg := TZcOpArgumentVar.Create;
  334            Arg.Id := LexString;
  335            Arg.Typ := Typ;
  336            CurrentFunction.AddArgument(Arg);
  337            SymTab.Add(Arg.Id,Arg);
  338          end;
  339       .)
  340  .
  341  /*------------------------------------------------------------------------*/
  342  
  343  LocalVarDecl<var OutOp : TZcOp> (. var Typ : TZcDataType; .)
  344  = (. OutOp := nil; .)
  345    Type<Typ> LocalVar<Typ,OutOp> {"," LocalVar<Typ,OutOp>}
  346  .
  347  
  348  /*------------------------------------------------------------------------*/
  349  
  350  LocalVar<Typ : TZcDataType; var OutOp : TZcOp> (. var Loc : TZcOpLocalVar; InitOp : TZcOp; .)
  351  = ident
  352       (. 
  353          if SymTab.ScopeContains(LexString) then
  354            ZError('Name already defined: ' + LexString);
  355  
  356          Loc := TZcOpLocalVar.Create(nil);
  357          Loc.Id := LexString;
  358          Loc.Typ := Typ;
  359       .)
  360       [ "=" Init<InitOp> (. Loc.InitExpression:=InitOp; .) ]
  361       (.
  362          SymTab.Add(Loc.Id,Loc);
  363          CurrentFunction.AddLocal(Loc);
  364  
  365          if Assigned(Loc.InitExpression) then
  366          begin
  367            //Generate tree for initial assignment
  368            if OutOp=nil then
  369              OutOp := MakeOp(zcBlock);
  370            OutOp.Children.Add( MakeAssign(atAssign, MakeOp(zcIdentifier,Loc.Id),Loc.InitExpression) );
  371          end;
  372  
  373       .)
  374  .
  375  
  376  /*------------------------------------------------------------------------*/
  377  
  378  GlobalVarRest<Typ : TZcDataType; const Name : string; IsPrivate : boolean> (. var V : TDefineVariableBase; .)
  379  =
  380       (.
  381          if SymTab.ScopeContains(Name) then
  382            ZError('Name already defined: ' + Name);
  383  
  384          if Typ.Kind=zctArray then
  385          begin
  386            TDefineArray(Typ.TheArray)._ZApp := Self.ZApp; //must have zapp set to clone
  387            V := TDefineArray(Typ.TheArray).Clone as TDefineVariableBase;
  388            V._ReferenceClassId := Typ.ReferenceClassId;
  389            Self.ZApp.GlobalVars.AddComponent(V);
  390          end
  391          else
  392          begin
  393            V := TDefineVariable.Create(Self.ZApp.GlobalVars);
  394            V._Type := Typ.Kind;
  395            V._ReferenceClassId := Typ.ReferenceClassId;
  396          end;
  397  
  398          V.SetString('Name', AnsiString(Name));
  399          V.DesignerReset; //Needed to init managed variables
  400          if IsPrivate then
  401            SymTab.Add(Name,V)
  402          else
  403            SymTab.AddPrevious(Name,V);
  404       .)
  405  .
  406  
  407  
  408  GlobalVar<Typ : TZcDataType; IsPrivate : boolean>
  409  = ident GlobalVarRest<Typ,LexString,IsPrivate>
  410  .
  411  
  412  GlobalVarDecl<Typ : TZcDataType; const Name : string; IsPrivate : boolean>
  413  = GlobalVarRest<Typ,Name,IsPrivate> {"," GlobalVar<Typ,IsPrivate>}
  414  .
  415  
  416  /*------------------------------------------------------------------------*/
  417  
  418  Init<var OutOp : TZcOp>
  419  = Expr<OutOp>
  420  .
  421  
  422  /*------------------------------------------------------------------------*/
  423  Argument<var OutOp : TZcOp>
  424  = /* ["ref" | "out"] */
  425    (. OutOp := nil; .)
  426    Expr<OutOp>
  427    (. if OutOp=nil then ZError('Missing argument'); .)
  428  .
  429  
  430  /*------------------------------------------------------------------------*
  431   *-------------------------------- Types ---------------------------------*
  432   *------------------------------------------------------------------------*/
  433  
  434  /* Attribute "type" is needed for error messages in EmbeddedStatement     *
  435   * and for array creation expressions                                     */
  436  
  437  
  438  Type<var Typ : TZcDataType>
  439  (.
  440    var
  441      A : TDefineArray;
  442      SizeOp : TZcOp;
  443      I : integer;
  444  .)
  445  =  (. FillChar(Typ,SizeOf(Typ),0); .)
  446    ( SimpleType<Typ> )
  447    {
  448      (
  449        "["       (.
  450                     A := TDefineArray.Create(nil);
  451                     GlobalNames.Add(A);
  452                     A._Type := Typ.Kind;
  453                     Typ.Kind := zctArray;
  454                     Typ.TheArray := A;
  455                  .)
  456  
  457           [ Expr<SizeOp> (.
  458              SizeOp := SizeOp.Optimize;
  459              if SizeOp.Kind<>zcConstLiteral then
  460                ZError('Array size must be a constant expression');
  461              A.SizeDim1 := Trunc( (SizeOp as TZcOpLiteral).Value );
  462                           .)
  463           ]
  464  
  465           { ","  (. if A.Dimensions=High(TArrayDimensions) then ZError('Too many array dimensions'); Inc(A.Dimensions); .)
  466             [ Expr<SizeOp> (.
  467                  SizeOp := SizeOp.Optimize;
  468                  if SizeOp.Kind<>zcConstLiteral then
  469                    ZError('Array size must be a constant expression');
  470                 I := Trunc( (SizeOp as TZcOpLiteral).Value );
  471                 if (A.Dimensions=dadTwo) then A.SizeDim2 := I else A.SizeDim3 := I;
  472             .) ]
  473           }
  474         "]"
  475      )
  476    }
  477  .
  478  
  479  /*------------------------------------------------------------------------*/
  480  
  481  SimpleType<var Typ : TZcDataType>
  482  (.
  483    var
  484      A : TDefineArray;
  485  .)
  486  /* = IntType | "float" | "double" | "decimal" | "bool" */
  487  = "float" (. Typ.Kind := zctFloat; .)
  488    | "int" (. Typ.Kind := zctInt; .)
  489    | "byte" (. Typ.Kind := zctByte; .)
  490    | "string" (. Typ.Kind := zctString; .)
  491    | "model" (. Typ.Kind := zctModel; .)
  492    | "xptr" (. Typ.Kind := zctXptr; .)
  493  
  494    | "mat4" (.
  495       A := Prototypes.Mat4Array;
  496       Typ.Kind := zctMat4;
  497       Typ.TheArray := A;
  498      .)
  499    | "vec2" (.
  500       A := Prototypes.Vec2Array;
  501       Typ.Kind := zctVec2;
  502       Typ.TheArray := A;
  503    .)
  504    | "vec3" (.
  505       A := Prototypes.Vec3Array;
  506       Typ.Kind := zctVec3;
  507       Typ.TheArray := A;
  508    .)
  509    | "vec4" (.
  510       A := Prototypes.Vec4Array;
  511       Typ.Kind := zctVec4;
  512       Typ.TheArray := A;
  513    .)
  514  
  515    /* Changes below also must be made in homographs-section */
  516    | "Material" (. Typ.Kind := zctReference; Typ.ReferenceClassId := MaterialClassId; .)
  517    | "Sound" (. Typ.Kind := zctReference; Typ.ReferenceClassId := SoundClassId; .)
  518    | "Shader" (. Typ.Kind := zctReference; Typ.ReferenceClassId := ShaderClassId; .)
  519    | "Bitmap" (. Typ.Kind := zctReference; Typ.ReferenceClassId := ZBitmapClassId; .)
  520    | "Mesh" (. Typ.Kind := zctReference; Typ.ReferenceClassId := MeshClassId; .)
  521    | "Camera" (. Typ.Kind := zctReference; Typ.ReferenceClassId := CameraClassId; .)
  522    | "Font" (. Typ.Kind := zctReference; Typ.ReferenceClassId := FontClassId; .)
  523    | "Sample" (. Typ.Kind := zctReference; Typ.ReferenceClassId := SampleClassId; .)
  524    | "File" (. Typ.Kind := zctReference; Typ.ReferenceClassId := ZFileClassId; .)
  525  
  526    | "Component" (. Typ.Kind := zctReference; Typ.ReferenceClassId := AnyComponentClassId; .)
  527  .
  528  
  529  /*------------------------------------------------------------------------*/
  530  
  531  /* IntType
  532  = "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char"
  533  . */
  534  
  535  
  536  ConstantDeclarationList<IsPrivate : boolean>
  537  (.
  538  var
  539    Typ : TZcDataType;
  540  .)
  541  = "const" Type<Typ> ConstantDeclaration<Typ,IsPrivate> {"," ConstantDeclaration<Typ,IsPrivate> }
  542    ";"
  543  .
  544  
  545  ConstantDeclaration<var Typ : TZcDataType; IsPrivate : boolean>
  546  (.
  547  var
  548    Cns : TDefineConstant;
  549    Op : TZcOp;
  550    Lit : TZcOpLiteral;
  551    CnsName : string;
  552  .)
  553  =
  554  ident (. CnsName := LexString; .) "=" Expr<Op>
  555    (.
  556     if not (Typ.Kind in [zctByte,zctInt,zctFloat,zctString]) then
  557       ZError('Only byte, int, float and string constants are allowed');
  558  
  559     Op := Op.Optimize;
  560     if not (Op is TZcOpLiteral) then
  561       ZError('Constant expression expected: ' + Op.ToString);
  562  
  563     Lit := Op as TZcOpLiteral;
  564  
  565     if (Lit.Typ.Kind<>Typ.Kind) and not ((Typ.Kind=zctByte) and (Lit.Typ.Kind=zctInt))then
  566       ZError('Constant expression is not of the expected type: ' + Op.ToString);
  567  
  568     Cns := TDefineConstant.Create(nil);
  569     Cns.SetString('Name',AnsiString(CnsName));
  570     GlobalNames.Add(Cns);
  571  
  572     case Typ.Kind of
  573       zctByte:
  574         begin
  575           Cns._Type := zctByte;
  576           Cns.ByteValue := Round(Lit.Value);
  577         end;
  578       zctInt:
  579         begin
  580           Cns._Type := zctInt;
  581           Cns.IntValue := Round(Lit.Value);
  582         end;
  583       zctFloat:
  584         begin
  585           Cns._Type := zctFloat;
  586           Cns.Value := Lit.Value;
  587         end;
  588       zctString:
  589         begin
  590           Cns._Type := zctString;
  591           Cns.SetString('StringValue',AnsiString(Lit.StringValue));
  592         end;
  593       else
  594         ZError('Wrong type of constant expression: ' + GetZcTypeName(Typ));
  595     end;
  596     if IsPrivate then
  597       SymTab.Add(CnsName,Cns)
  598     else
  599       SymTab.AddPrevious(CnsName,Cns)
  600    .)
  601  /* {"," ident "=" Expr<Op>} */
  602  .
  603  
  604  /*------------------------------------------------------------------------*
  605   *------------------------------ Statements ------------------------------*
  606   *------------------------------------------------------------------------*/
  607  
  608  Statement<var OutOp : TZcOp>
  609  = (. OutOp := nil; .)
  610  
  611  ConstantDeclarationList<false>
  612  
  613  /*IF IsLocalVarDecl THEN
  614  BEGIN
  615    LocalVarDecl ";"
  616  END
  617  |  EmbeddedStatement<OutOp> */
  618  
  619  | LocalVarDecl<OutOp> ";"
  620  | EmbeddedStatement<OutOp>
  621    /* LL(1) confict between LocalVarDecl and StatementExpr: *
  622     * ident {"." ident} { "[" ...                           */
  623  .
  624  
  625  /*------------------------------------------------------------------------*/
  626  EmbeddedStatement<var OutOp : TZcOp>
  627    (. var
  628         SwitchValueOp,Op,IfOp,IfBody,ElseOp : TZcOp;
  629         ForInitOp,ForCondOp,ForIncOp,ForBodyOp : TZcOp;
  630         WhileCondOp,WhileBodyOp : TZcOp;
  631         SwitchOp : TZcOpSwitch;
  632         Loc : TZcOpLocalVar;
  633    .)
  634  = Block<OutOp>
  635  | ";"   (. OutOp := MakeOp(zcNop); .)
  636  | StatementExpr<OutOp> ";"
  637  | "if" (. ElseOp := nil; .)
  638    "(" Expr<IfOp> ")" EmbeddedStatement<IfBody> ["else" EmbeddedStatement<ElseOp>]
  639          (. OutOp := MakeOp(zcIf,[IfOp,IfBody,ElseOp]); .)
  640   | "switch" "(" Expr<SwitchValueOp> ")"
  641        (.
  642           Loc := MakeTemp(SwitchValueOp.GetDataType.Kind);
  643           SymTab.Add(Loc.Id,Loc);
  644           CurrentFunction.AddLocal(Loc);
  645  
  646           OutOp := MakeOp(zcBlock);
  647           OutOp.Children.Add( MakeAssign(atAssign, MakeOp(zcIdentifier,Loc.Id),SwitchValueOp) );
  648  
  649           SwitchOp := TZcOpSwitch.Create(nil);
  650           SwitchOp.ValueOp := MakeIdentifier(Loc.Id);
  651           OutOp.Children.Add(SwitchOp);
  652        .)
  653     "{" {
  654       (. SwitchOp.CaseOps.Add( MakeOp(zcNop) ); SwitchOp.StatementsOps.Add( MakeOp(zcNop) ); .)
  655       SwitchSection<SwitchOp>
  656     } "}"
  657   | "while"
  658       (. try
  659           SymTab.PushScope;
  660           WhileCondOp := nil; WhileBodyOp := nil; .)
  661     "(" Expr<WhileCondOp> ")" EmbeddedStatement<WhileBodyOp>
  662     (.
  663           OutOp := MakeOp(zcWhile,[WhileCondOp,WhileBodyOp]);
  664         finally
  665           SymTab.PopScope;
  666         end;
  667     .)
  668   /* | "do" EmbeddedStatement<Op> "while" "(" Expr<Op> ")" ";" */
  669   | "for"
  670      (. try
  671           SymTab.PushScope;
  672           ForInitOp :=nil; ForCondOp := nil; ForIncOp := nil; .)
  673     "(" [ForInit<ForInitOp>] ";" [Expr<ForCondOp>] ";" [ForInc<ForIncOp>] ")" EmbeddedStatement<ForBodyOp>
  674     (.
  675           OutOp := MakeOp(zcForLoop,[ForInitOp,ForCondOp,ForIncOp,ForBodyOp]);
  676         finally
  677           SymTab.PopScope;
  678         end;
  679     .)
  680  /* | "foreach" "(" Type ident "in" Expr<Op> ")" EmbeddedStatement<Op> */
  681   | "break" ";"    (. OutOp := MakeOp(zcBreak); .)
  682   | "continue" ";" (. OutOp := MakeOp(zcContinue); .)
  683   | (. Op := nil; .) "return" [ Expr<Op> ] ";"
  684      (.
  685          if (Op=nil) then
  686          begin
  687            if CurrentFunction.ReturnType.Kind<>zctVoid then
  688              SynError(202)
  689            else
  690              OutOp := MakeOp(zcReturn);
  691          end else
  692          begin
  693            if CurrentFunction.ReturnType.Kind=zctVoid then
  694              SynError(203)
  695            else
  696              OutOp := MakeOp(zcReturn,[ MakeCompatible(Op,CurrentFunction.ReturnType) ]);
  697          end;
  698          Inc(CurrentFunction.ReturnCount);
  699      .)
  700  .
  701  /*------------------------------------------------------------------------*/
  702  
  703  Block<var OutOp : TZcOp>
  704    (. var
  705         Op : TZcOp;
  706    .)
  707  = (. Op := nil;
  708       OutOp := MakeOp(zcBlock);
  709    .)
  710    "{" {Statement<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) } "}".
  711  
  712  /*------------------------------------------------------------------------*/
  713  StatementExpr<var OutOp : TZcOp>           (. var Op1,Op2 : TZcOp; Kind : TZcAssignType; .)
  714  = (. Op1 :=nil; Op2 := nil; .)
  715    Unary<Op1>
  716    ( AssignOp<Kind> Expr<Op2>
  717      (.
  718        if Op2<>nil then
  719          OutOp := MakeAssign(Kind,Op1,Op2);
  720      .)
  721    |                             (. OutOp := Op1; .)
  722    )
  723  .
  724  
  725  /*------------------------------------------------------------------------*/
  726  AssignOp<var Kind : TZcAssignType>
  727  = "="     (. Kind := atAssign; .)
  728    | "+="  (. Kind := atPlusAssign; .)
  729    | "-="  (. Kind := atMinusAssign; .)
  730    | "*="  (. Kind := atMulAssign; .)
  731    | "/="  (. Kind := atDivAssign; .)
  732  /*  | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" */
  733  .
  734  
  735  /*------------------------------------------------------------------------*/
  736  
  737  SwitchSection<SwitchOp : TZcOpSwitch> (. var Op : TZcOp; .)
  738  = (. Op := nil; .)
  739    SwitchLabel<Op>   (. AddSwitchLabel(SwitchOp,Op); .)
  740    {
  741      SwitchLabel<Op> (. AddSwitchLabel(SwitchOp,Op); .)
  742    }
  743    Statement<Op>    (. if Assigned(Op) then SwitchOp.StatementsOps.Last.Children.Add(Op); .)
  744    {
  745       Statement<Op> (. if Assigned(Op) then SwitchOp.StatementsOps.Last.Children.Add(Op); .)
  746    }
  747  .
  748  
  749  /*------------------------------------------------------------------------*/
  750  
  751  SwitchLabel<var OutOp : TZcOp>
  752  = "case" Expr<OutOp> ":"
  753  | "default" ":"
  754  .
  755  
  756  /*------------------------------------------------------------------------*/
  757  
  758  ForInit<var OutOp : TZcOp>     (. var Op : TZcOp; .)
  759  = (. Op:=nil; OutOp := MakeOp(zcBlock); .)
  760  (
  761  LocalVarDecl<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .)
  762  | (. Op:=nil; .) StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .)
  763    { (. Op:=nil; .) "," StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) }
  764  )
  765  .  
  766  
  767  /*------------------------------------------------------------------------*/
  768  
  769  ForInc<var OutOp : TZcOp>      (. var Op : TZcOp; .)
  770  = (. Op:=nil; 
  771       OutOp := MakeOp(zcBlock);
  772    .) 
  773  (
  774  StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) 
  775  { (. Op:=nil; .) "," StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) }
  776  )
  777  . 
  778  
  779  
  780  /*------------------------------------------------------------------------*
  781   *----------------------------- Expressions ------------------------------*
  782   *------------------------------------------------------------------------*/
  783  
  784  
  785  Expr<var OutOp : TZcOp>   (. var Op1,Op2 : TZcOp; Kind : TZcAssignType; .)
  786  = (. Op1 :=nil; Op2 := nil; .)
  787    Unary<Op1>
  788    ( OrExpr<Op1,OutOp>
  789        ["?" Expr<Op1> ":" Expr<Op2>
  790           (. if (OutOp=nil) or (Op1=nil) or (Op2=nil) then
  791                SynError(205)
  792              else
  793                OutOp := MakeOp(zcConditional,[OutOp,Op1, MakeCompatible(Op2,Op1.GetDataType) ]);
  794           .)
  795        ]
  796    | AssignOp<Kind> Expr<Op2>    (. OutOp := MakeAssign(Kind,Op1, Op2); .)
  797    )
  798  .
  799  /*------------------------------------------------------------------------*/
  800  OrExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  801  = AndExpr<InOp,OutOp>   (. L := OutOp; .)
  802      {"||" Unary<Op> AndExpr<Op,R>
  803        (. OutOp := MakeOp(zcOr,[L,R]);
  804           L := OutOp; .)
  805      }
  806  .
  807  
  808  
  809  /*------------------------------------------------------------------------*/
  810  AndExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  811  = BitOrExpr<InOp,OutOp>  (. L := OutOp; .)
  812      {"&&" Unary<Op> BitOrExpr<Op,R>
  813        (. OutOp := MakeOp(zcAnd,[L,R]);
  814           L := OutOp; .)
  815      }
  816  .
  817  /*------------------------------------------------------------------------*/
  818  BitOrExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  819  = BitXorExpr<InOp,OutOp> (. L := OutOp; .)
  820    {"|" Unary<Op> BitXorExpr<Op,R>
  821      (. OutOp := MakeOp(zcBinaryOr,[L,R]);
  822         L := OutOp; .)
  823    }
  824  .
  825  
  826  /*------------------------------------------------------------------------*/
  827  BitXorExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  828  = BitAndExpr<InOp,OutOp> (. L := OutOp; .)
  829    {"^" Unary<Op> BitAndExpr<Op,R>
  830      (. OutOp := MakeOp(zcBinaryXor,[L,R]);
  831         L := OutOp; .)
  832    }
  833  .
  834  
  835  /*------------------------------------------------------------------------*/
  836  BitAndExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  837  = EqlExpr<InOp,OutOp> (. L := OutOp; .)
  838    {"&" Unary<Op> EqlExpr<Op,R>
  839      (. OutOp := MakeOp(zcBinaryAnd,[L,R]);
  840         L := OutOp; .)
  841    }
  842  .
  843  
  844  /*------------------------------------------------------------------------*/
  845  EqlExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; Kind : TZcOpKind; .)
  846  = RelExpr<InOp,OutOp> (. L := OutOp; Kind := zcNop; .)
  847    {( "!="   (. Kind := zcCompNE; .)
  848     | "=="   (. Kind := zcCompEQ; .)
  849     )
  850     Unary<Op> RelExpr<Op,R>
  851           (. OutOp := MakeBinary(Kind, L,R);
  852              L := OutOp;
  853           .)
  854    }
  855  .
  856  /*------------------------------------------------------------------------*/
  857  RelExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp;  Kind : TZcOpKind; .)
  858  = ShiftExpr<InOp,OutOp> (. L := OutOp; Kind := zcNop; .)
  859    { ( "<"       (. Kind := zcCompLT; .)
  860      | ">"       (. Kind := zcCompGT; .)
  861      | "<="      (. Kind := zcCompLE; .)
  862      | ">="      (. Kind := zcCompGE; .)
  863       )
  864      Unary<Op> ShiftExpr<Op,R>
  865           (. OutOp := MakeBinary(Kind, L,R );
  866              L := OutOp;
  867           .)
  868    }
  869  .
  870  /*------------------------------------------------------------------------*/
  871  ShiftExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; Kind : TZcOpKind; .)
  872  = AddExpr<InOp,OutOp> (. L := OutOp; Kind := zcNop; .)
  873    { ("<<"  (. Kind := zcBinaryShiftL; .)
  874      | ">>" (. Kind := zcBinaryShiftR; .)
  875      )
  876      Unary<Op> AddExpr<Op,R>
  877      (. OutOp := MakeOp(Kind,[L,R]);
  878         L := OutOp; .)
  879    }
  880  .
  881  /*------------------------------------------------------------------------*/
  882  AddExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp;  Kind : TZcOpKind;.)
  883  = MulExpr<InOp,OutOp>   (. L := OutOp; Kind := zcNop; .)
  884      {( "+"    (. Kind := zcPlus; .)
  885       | "-"    (. Kind := zcMinus; .)
  886       ) Unary<Op> MulExpr<Op,R>
  887           (. 
  888              if (L=nil) or (R=nil) then
  889                ZError('Invalid syntax');
  890              OutOp := MakeBinary(Kind,L,R);
  891              L := OutOp;
  892           .)
  893      }
  894  .
  895  /*------------------------------------------------------------------------*/
  896  MulExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Tmp : TZcOp; Kind : TZcOpKind; .)
  897  = (. OutOp := InOp; Kind := zcNop; .)
  898    { ("*"      (. Kind := zcMul; .)
  899      | "/"     (. Kind := zcDiv; .)
  900      | "%"     (. Kind := zcMod; .)
  901      ) Unary<Tmp>
  902           (. OutOp := MakeBinary(Kind,InOp,Tmp);
  903              InOp := OutOp;
  904           .)
  905      }
  906  .
  907  /*------------------------------------------------------------------------*/
  908  Unary<var OutOp : TZcOp>         (. var LastOp,Tmp : TZcOp; Kind : TZcOpKind; .)
  909  =       (. LastOp := nil; Kind := zcNop; .)
  910    {
  911      (
  912        /* "+" | */
  913        "-"   (. Kind := zcNegate; .) |
  914        "++"  (. Kind := zcPreInc; .) |    
  915        "--"  (. Kind := zcPreDec; .) |
  916        "!"   (. Kind := zcNot; .)
  917        /* | "~" | "*" */
  918      )
  919      (.
  920         if Kind in [zcNegate,zcNot] then
  921         begin
  922           Tmp := MakeOp(Kind);
  923           if LastOp<>nil then
  924             LastOp.Children.Add(Tmp);
  925           LastOp := Tmp;
  926         end else if Assigned(LastOp) then
  927           ZError('-- and ++ cannot be combined with other unary ops');
  928      .)
  929    }
  930    Primary<Tmp>
  931      (.
  932         if Kind in [zcNop,zcNegate,zcNot] then
  933         begin
  934           if LastOp<>nil then
  935           begin
  936             LastOp.Children.Add(Tmp);
  937             OutOp := LastOp;
  938           end else
  939             OutOp := Tmp;
  940         end else
  941         begin
  942           OutOp := MakePrePostIncDec(Kind,Tmp);
  943         end;
  944      .)
  945  .
  946  
  947  
  948  
  949  /*------------------------------------------------------------------------*/
  950  InvokeArgument<var OutOp : TZcOp; Ci : TZComponentInfo>
  951  (.
  952    var
  953      Op : TZcOp;
  954      Prop : TZProperty;
  955  .)
  956  = (. OutOp := nil; Op := nil; .)
  957    ident (.
  958      Prop := Ci.GetProperties.GetByName(LexString);
  959      if Prop=nil then
  960        ZError(LexString + ' is not a property of ' + Ci.ZClassName);
  961      if not (Prop.PropertyType in [zptFloat,zptInteger,zptByte,zptBoolean,zptString,zptComponentRef]) then
  962        ZError(LexString + ' property of ' + Ci.ZClassName + ' is of a datatype that cannot be set using inline component invokation syntax');
  963      OutOp := MakeOp(zcIdentifier);
  964      OutOp.Id := LexString;
  965    .)
  966    ":" Expr<Op>
  967    (. if Op=nil then
  968         ZError('Missing argument');
  969       Op := MakeCompatible(Op, PropTypeToZType(Prop.PropertyType));
  970       OutOp.Children.Add(Op);
  971    .)
  972  .
  973  
  974  
  975  /*------------------------------------------------------------------------*/
  976  ReinterpretCast<var OutOp : TZcOp>
  977  (.
  978  var
  979    Op : TZcOp;
  980    Typ : TZcDataType;
  981  .)
  982  = "reinterpret_cast" "<" SimpleType<Typ> ">"
  983    "(" Expr<Op> ")"
  984    (.
  985       OutOp := TZcOpReinterpretCast.Create(nil);
  986       OutOp.Children.Add(Op);
  987       (OutOp as TZcOpReinterpretCast).Typ := Typ;
  988    .)
  989  .
  990  
  991  /*------------------------------------------------------------------------*/
  992  InlineComponent<var OutOp : TZcOp>
  993  (. var Op : TZcOp;
  994       Ci : TZComponentInfo;
  995  .)
  996  =  (. OutOp := nil;
  997        IsInInvokeArg := True;
  998     .)
  999     "@" ident (.
 1000         Ci := ComponentManager.GetInfoFromName(LexString);
 1001         OutOp := TZcOpInvokeComponent.Create(nil);
 1002         OutOp.Id := LexString;
 1003      .)
 1004      "("
 1005          [InvokeArgument<Op,Ci>       (. OutOp.Children.Add(Op); .)
 1006            {"," InvokeArgument<Op,Ci> (. OutOp.Children.Add(Op); .)
 1007            }
 1008          ]
 1009      ")" (. IsInInvokeArg := False; .)
 1010  .
 1011  
 1012  /*------------------------------------------------------------------------*/
 1013  Primary<var OutOp : TZcOp>
 1014  (. var Op : TZcOp; S : string; V : double;
 1015       Typ : TZcDataType;
 1016  .)
 1017  =            (. OutOp := nil; .)
 1018    (
 1019      ident    (. OutOp := CheckPrimary( MakeIdentifier(LexString) );  .)
 1020    | InlineComponent<OutOp>
 1021    | Literal<Typ>  (.
 1022          if Typ.Kind in [zctString,zctNull] then
 1023            OutOp := TZcOpLiteral.Create(Typ.Kind,LexString)
 1024          else
 1025          begin
 1026            try
 1027              S := LexString;
 1028              V := ZcStrToFloat(S);
 1029              OutOp := TZcOpLiteral.Create(Typ.Kind,V)
 1030            except on EConvertError do
 1031              SynError(200);
 1032            end;
 1033          end;
 1034       .)
 1035    | "(" Expr<OutOp> ")"
 1036  /*  | ( "bool"   | "byte"   | "char" | "decimal" | "double"
 1037      | "float"  | "int"    | "long" | "object"  | "sbyte"
 1038      | "short"  | "string" | "uint" | "ulong"   | "ushort"
 1039      ) "." ident */
 1040    | ReinterpretCast<OutOp>
 1041    )
 1042  
 1043    {
 1044    "++" (. OutOp := MakePrePostIncDec(zcPostInc,OutOp); .)
 1045    | "--" (. OutOp := MakePrePostIncDec(zcPostDec,OutOp); .)
 1046  
 1047  /*  | "->" ident */
 1048  
 1049    | "." (. IsInIdent := True; .) ident (.
 1050  
 1051        if not (OutOp.Kind in [zcIdentifier,zcSelect,zcFuncCall,zcArrayAccess]) then
 1052          ZError('Invalid use of "."');
 1053  
 1054        Op := MakeOp(zcSelect,LexString);
 1055        Op.Children.Add(OutOp);
 1056  
 1057        OutOp := CheckPrimary(Op);
 1058  
 1059        IsInIdent := False;
 1060  
 1061      .)
 1062  
 1063    | "(" (.
 1064             if (OutOp=nil) or (OutOp.Kind<>zcIdentifier) then
 1065               ZError('Unexpected "("');
 1066             OutOp.Kind:=zcFuncCall;
 1067             if OutOp.Ref=CurrentFunction then
 1068               CurrentFunction.IsRecursive := True;
 1069           .)
 1070          [Argument<Op> (. OutOp.Children.Add(Op); .)
 1071            {"," Argument<Op> (. OutOp.Children.Add(Op); .)
 1072            }
 1073          ]
 1074          (.
 1075             if not VerifyFunctionCall(OutOp,S) then
 1076               ZError(S);
 1077          .)
 1078      ")"
 1079  
 1080    | "[" (.
 1081             if (OutOp=nil) or (not (OutOp.Kind in [zcIdentifier,zcSelect,zcArrayAccess,zcFuncCall])) then
 1082               ZError('Unexpected "["');
 1083             Op := MakeArrayAccess(OutOp);
 1084             OutOp := Op;
 1085           .)
 1086  
 1087          Expr<Op> (. OutOp.Children.Add( MakeCompatible(Op,zctInt) ); .)
 1088            {"," Expr<Op> (. OutOp.Children.Add( MakeCompatible(Op,zctInt) ); .) }
 1089          "]"
 1090    }
 1091  .
 1092  /*------------------------------------------------------------------------*/
 1093  Literal<var Typ : TZcDataType>
 1094  = intCon (. Typ.Kind :=zctInt; .) |
 1095    realCon (. Typ.Kind := zctFloat; .) |
 1096    stringCon (. Typ.Kind := zctString; .)
 1097    | "null" (. Typ.Kind := zctNull; .)
 1098    /* | "true" | "false"  */
 1099  .
 1100  
 1101  END Zc.



