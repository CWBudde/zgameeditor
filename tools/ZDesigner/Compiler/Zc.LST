
Listing
-------
0 errors and 45 warnings
*****  Warning: LL1 warning in ZcFuncBody:"vec3" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"vec2" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"vec4" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"if" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"const" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"mat4" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"byte" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"int" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"string" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"xptr" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"model" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"@" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"reinterpret_cast" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"null" is start & successor of deletable structure
*****  Warning: LL1 warning in EmbeddedStatement:"else" is start & successor of deletable structure
*****  Warning: LL1 warning in Zc: contents of [...] or {...} must not be deletable
*****  Warning: LL1 warning in ZcFuncBody:"return" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"while" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"switch" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"for" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"continue" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"break" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"float" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:lbrace is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:inc is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:lpar is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:not is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:minus is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:realCon is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:intCon is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:stringCon is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:dec is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:ident is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Camera" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Mesh" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Font" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"File" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Sample" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Material" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:scolon is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Sound" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Bitmap" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Shader" is start & successor of deletable structure
**************************
    1  COMPILER Zc
    2  
    3  FRAME "delphi.frm"
    4  
    5  uses = (. Zc_Ops, Contnrs, uSymTab, ZClasses, Compiler, SysUtils, ZExpressions, ZApplication .)
    6  
    7  public = (.
    8      ZFunctions : TObjectList;
    9      SymTab : TSymbolTable;
   10      ReturnType : TZcDataType;
   11      AllowFunctions : boolean;
   12      GlobalNames : TObjectList;
   13      TempCounter : integer;
   14      ZApp : TZApplication;
   15      destructor Destroy; override;
   16      procedure CheckHomograph(var sym: Integer); override;
   17  .)
   18  private = (.
   19      IsInIdent,IsInInvokeArg : boolean;
   20      CurrentFunction : TZcOpFunctionUserDefined;
   21      procedure CleanUp;
   22      procedure ZError(const S : string);
   23      procedure AddSwitchLabel(SwitchOp : TZcOpSwitch; var Op: TZcOp);
   24      procedure OnParserError(Sender: TObject; ErrorType,ErrorCode, line,col: Integer; const Msg, data: string);
   25      .)
   26  precreate = (.
   27      ZFunctions := TObjectList.Create(False);
   28      Self.OnError := OnParserError;
   29  
   30  .)
   31  
   32  semErrors = (.
   33      200 : Result := 'Not a floating point value';
   34      201 : Result := 'Name already defined in this scope';
   35      202 : Result := 'Return value expected';
   36      203 : Result := 'Function should not return a value';
   37      204 : Result := 'Only function definitions are allowed here';
   38      205 : Result := 'Syntax not supported';
   39  .)
   40  
   41  implementation = (.
   42  
   43  procedure TZc.OnParserError(Sender: TObject; ErrorType,ErrorCode, line,col: Integer; const Msg, data: string);
   44  begin
   45    ZError(Msg + ' ' + Data);
   46  end;
   47  
   48  procedure TZc.CheckHomograph(var sym: Integer);
   49  begin
   50    //Only Homographs are name of component datatypes
   51    //If inside identifier "x.y.z" then let it refer to identifier instead
   52    if IsInIdent or IsInInvokeArg then
   53      sym := identSym;
   54  end;
   55  
   56  destructor TZc.Destroy;
   57  begin
   58    inherited;
   59    CleanUp;
   60  end;
   61  
   62  procedure TZc.AddSwitchLabel(SwitchOp : TZcOpSwitch; var Op: TZcOp);
   63  begin
   64    if Op=nil then
   65    begin
   66      if SwitchOp.HasDefault then
   67        ZError('Only one default statement is allowed.');
   68      SwitchOp.HasDefault := True;
   69    end else
   70      Op := MakeCompatible(Op,SwitchOp.ValueOp.GetDataType);
   71    SwitchOp.CaseOps.Last.Children.Add( Op );
   72    Op := nil;
   73  end;
   74  
   75  procedure TZc.CleanUp;
   76  begin
   77    Zc_Ops.FunctionCleanUps.Clear;
   78    ZFunctions.Free;
   79  end;
   80  
   81  procedure TZc.ZError(const S : string);
   82  var
   83    E : EParseError;
   84    P : TSymbolRec;
   85  begin
   86    E := EParseError.Create(S);
   87    E.Message := S;
   88    Scanner.GetPosition(P);
   89    E.Line := P.Line;
   90    E.Col := P.Col;
   91    if (E.Line<>0) or (E.Col<>0) then
   92      E.Message := E.Message + ' (line: ' + IntToStr(E.Line) + ', col: ' + IntToStr(E.Col) + ')';
   93    raise E;
   94  end;
   95  
   96  .)
   97  
   98  END
   99  
  100  
  101  CHARACTERS
  102  
  103          tab                = CHR(9). /*  9 = tabulator */
  104          eol                = CHR(10). /* 10 = line feed */
  105          cr                 = CHR(13). /* 13 = carriage return */
  106          newLine            = cr + eol. /* Line separator character (U+2028) + Paragraph separator character (U+2029) */
  107  
  108          letter             = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
  109          digit              = "0123456789".
  110          hexDigit           = digit + "ABCDEFabcdef".
  111          notDigit           = ANY - digit.
  112  
  113          char               = ANY - "'" - '\' - newLine.
  114          verbatimStringChar = ANY - '"'.
  115          regularStringChar  = ANY - '"' - '\' - newLine.
  116          notNewLine         = ANY - newLine .
  117  
  118  
  119  TOKENS
  120  
  121    /*--------------------------------------------------------------------------------*/
  122          intCon =
  123                  ( digit {digit}
  124                  | ("0x" | "0X") hexDigit {hexDigit}
  125                  )
  126                  /* ["U" | "u" | "L" | "l" | "UL" | "Ul" | "uL" | "ul" | "LU" | "Lu" | "lU" | "lu"] */
  127                  .
  128    /*--------------------------------------------------------------------------------*/
  129          realCon =
  130                  "." digit {digit}
  131                  [("e" | "E") ["+" | "-"] digit {digit}]
  132                  ["F" | "f" | "D" | "d" | "M" | "m"]
  133          | digit {digit}
  134                  ( "." digit {digit}
  135                          [("e" | "E" ) ["+" | "-"] digit {digit} ]
  136                          ["F" | "f" | "D" | "d" | "M" | "m"]
  137                  | ("e" | "E") ["+" | "-"] digit {digit}
  138                          ["F" | "f" | "D" | "d" | "M" | "m"]
  139                  | "F" | "f" | "D" | "d" | "M" | "m"
  140                  ).
  141    /*--------------------------------------------------------------------------------*/
  142          stringCon =
  143                  '"'    { regularStringChar
  144            | "\'" | '\"' | "\\" | "\n"
  145            }
  146                  '"'.
  147  
  148          ident = letter { letter | digit }.
  149  
  150  
  151          /*----- operators and special characters needed in LL(1) resolvers --------------*/
  152          and    = "&".
  153          assgn  = "=".
  154          colon  = ":".
  155          comma  = ",".
  156          dec    = "--".
  157          div    = "/".
  158          dot    = ".".
  159          eq     = "==".
  160          gt     = ">".
  161          gte    = ">=".
  162          inc    = "++".
  163          lbrace = "{".
  164          lbrack = "[".
  165          lpar   = "(".
  166          lshift = "<<".
  167          lt     = "<".
  168          lte    = "<=".
  169          minus  = "-".
  170          mod    = "%".
  171          neq    = "!=".
  172          not    = "!".
  173          or     = "|".
  174          plus   = "+".
  175          rbrace = "}".
  176          rbrack = "]".
  177          rpar   = ")".
  178          rshift = ">>".
  179          scolon = ";".
  180          tilde  = "~".
  181          times  = "*".
  182          xor    = "^".
  183  
  184  
  185  
  186  COMMENTS FROM "/*" TO "*/"
  187  COMMENTS FROM "//" TO eol
  188  
  189  IGNORE eol + cr + tab
  190  
  191  HOMOGRAPHS
  192    "Material"
  193    "Sound"
  194    "Shader" 
  195    "Bitmap" 
  196    "Mesh"
  197    "Camera" 
  198    "Font"
  199    "Sample"
  200    "File"
  201  
  202  PRODUCTIONS
  203  
  204  /*------------------------------------------------------------------------*
  205   *--------------------------- Declarations -------------------------------*
  206   *------------------------------------------------------------------------*/
  207  
  208  ZcFuncRest<Typ : TZcDataType; const Name : string>
  209  (.
  210  var
  211    Func : TZcOpFunctionUserDefined;
  212  .)
  213  =
  214       (.
  215          if SymTab.Contains(Name) then
  216            ZError('Name already defined: ' + Name);
  217  
  218          Func := TZcOpFunctionUserDefined.Create(GlobalNames);
  219          Func.Id := Name;
  220          Func.ReturnType := Typ;
  221          SymTab.Add(Func.Id,Func);
  222          ZFunctions.Add(Func);
  223          Self.CurrentFunction := Func;
  224          SymTab.PushScope;
  225          try
  226       .)
  227      [ FormalParams ] ")" "{" ZcFuncBody "}"
  228          (.
  229            finally
  230              SymTab.PopScope;
  231            end;
  232          .)
  233  .
  234  
  235  
  236  Zc (. var
  237          Typ : TZcDataType;
  238          Func : TZcOpFunctionUserDefined;
  239          Name : string;
  240      .)
  241  =
  242    IF (. AllowFunctions .)
***** ^ Warning: Misplaced resolver: no LL(1) conflict
  243    {
  244      ConstantDeclarationList
  245      |
  246      ("void" (. Typ.Kind := zctVoid; .) | Type<Typ> ) ident (. Name := LexString; .)
  247         /* Need to separate between global variable and method declarations */
  248         (
  249           "(" ZcFuncRest<Typ,Name>
  250           | GlobalVarDecl<Typ,Name> ";"
  251         )
  252    }
  253    | IF (. not AllowFunctions .)
***** ^ Warning: Misplaced resolver: no LL(1) conflict
  254    {
  255  
  256    (.
  257         Func := TZcOpFunctionUserDefined.Create(nil);
  258         Func.ReturnType := Self.ReturnType;
  259         Self.CurrentFunction := Func;
  260         try
  261           SymTab.PushScope;
  262           try
  263             ZFunctions.Add(Func);
  264    .)
  265    /* A zc-expression is treated like the body of a nameless function
  266       to allow local var declarations  */
  267  
  268    ZcFuncBody
  269    (.
  270           finally
  271             SymTab.PopScope;
  272           end;
  273         except on E: Exception do
  274           ZError(E.Message);
  275         end;
  276    .)
  277    }
  278  
  279  .
  280  
  281  /*------------------------------------------------------------------------*/
  282  
  283  ZcFuncBody (. var Op : TZcOp; .)
  284  =  {  (. Op:=nil; .)
  285        Statement<Op>
  286        (. if Op<>nil then
  287             CurrentFunction.Statements.Add(Op);
  288           Op := nil;
  289        .)
  290     }
  291  .
  292  
  293  /*------------------------------------------------------------------------*/
  294  FormalParams
  295  = ( Par ["," FormalParams] )
  296  .
  297  /*------------------------------------------------------------------------*/
  298  Par (.
  299  var
  300    Typ : TZcDataType;
  301    Arg : TZcOpArgumentVar;
  302    IsPtr : boolean;
  303  .)
  304  =  (. IsPtr := False; .)
  305    ["ref" (. IsPtr := True; .) ]
  306    Type<Typ> ident
  307       (.
  308          Typ.IsPointer := IsPtr;
  309          if SymTab.ScopeContains(LexString) then
  310            SynError(201)
  311          else
  312          begin
  313            Arg := TZcOpArgumentVar.Create;
  314            Arg.Id := LexString;
  315            Arg.Typ := Typ;
  316            CurrentFunction.AddArgument(Arg);
  317            SymTab.Add(Arg.Id,Arg);
  318          end;
  319       .)
  320  .
  321  /*------------------------------------------------------------------------*/
  322  
  323  LocalVarDecl<var OutOp : TZcOp> (. var Typ : TZcDataType; .)
  324  = (. OutOp := nil; .)
  325    Type<Typ> LocalVar<Typ,OutOp> {"," LocalVar<Typ,OutOp>}
  326  .
  327  
  328  /*------------------------------------------------------------------------*/
  329  
  330  LocalVar<Typ : TZcDataType; var OutOp : TZcOp> (. var Loc : TZcOpLocalVar; InitOp : TZcOp; .)
  331  = ident
  332       (. 
  333          if SymTab.ScopeContains(LexString) then
  334            ZError('Name already defined: ' + LexString);
  335  
  336          Loc := TZcOpLocalVar.Create(nil);
  337          Loc.Id := LexString;
  338          Loc.Typ := Typ;
  339       .)
  340       [ "=" Init<InitOp> (. Loc.InitExpression:=InitOp; .) ]
  341       (.
  342          SymTab.Add(Loc.Id,Loc);
  343          CurrentFunction.AddLocal(Loc);
  344  
  345          if Assigned(Loc.InitExpression) then
  346          begin
  347            //Generate tree for initial assignment
  348            if OutOp=nil then
  349              OutOp := MakeOp(zcBlock);
  350            OutOp.Children.Add( MakeAssign(atAssign, MakeOp(zcIdentifier,Loc.Id),Loc.InitExpression) );
  351          end;
  352  
  353       .)
  354  .
  355  
  356  /*------------------------------------------------------------------------*/
  357  
  358  GlobalVarRest<Typ : TZcDataType; const Name : string> (. var V : TDefineVariableBase; .)
  359  =
  360       (.
  361          if SymTab.ScopeContains(Name) then
  362            ZError('Name already defined: ' + Name);
  363  
  364          if Typ.Kind=zctArray then
  365          begin
  366            TDefineArray(Typ.TheArray)._ZApp := Self.ZApp; //must have zapp set to clone
  367            V := TDefineArray(Typ.TheArray).Clone as TDefineVariableBase;
  368            Self.ZApp.GlobalVars.AddComponent(V);
  369          end
  370          else
  371          begin
  372            V := TDefineVariable.Create(Self.ZApp.GlobalVars);
  373            V._Type := Typ.Kind;
  374          end;
  375  
  376          V.SetString('Name', AnsiString(Name));
  377          V.DesignerReset; //Needed to init managed variables
  378          SymTab.Add(Name,V);
  379       .)
  380  .
  381  
  382  
  383  GlobalVar<Typ : TZcDataType>
  384  = ident GlobalVarRest<Typ,LexString>
  385  .
  386  
  387  GlobalVarDecl<Typ : TZcDataType; const Name : string>
  388  = GlobalVarRest<Typ,Name> {"," GlobalVar<Typ>}
  389  .
  390  
  391  /*------------------------------------------------------------------------*/
  392  
  393  Init<var OutOp : TZcOp>
  394  = Expr<OutOp>
  395  .
  396  
  397  /*------------------------------------------------------------------------*/
  398  Argument<var OutOp : TZcOp>
  399  = /* ["ref" | "out"] */
  400    (. OutOp := nil; .)
  401    Expr<OutOp>
  402    (. if OutOp=nil then ZError('Missing argument'); .)
  403  .
  404  
  405  /*------------------------------------------------------------------------*
  406   *-------------------------------- Types ---------------------------------*
  407   *------------------------------------------------------------------------*/
  408  
  409  /* Attribute "type" is needed for error messages in EmbeddedStatement     *
  410   * and for array creation expressions                                     */
  411  
  412  
  413  Type<var Typ : TZcDataType>
  414  (.
  415    var
  416      A : TDefineArray;
  417      SizeOp : TZcOp;
  418      I : integer;
  419  .)
  420  =  (. FillChar(Typ,SizeOf(Typ),0); .)
  421    ( SimpleType<Typ> )
  422    {
  423      (
  424        "["       (.
  425                     A := TDefineArray.Create(nil);
  426                     GlobalNames.Add(A);
  427                     A._Type := Typ.Kind;
  428                     Typ.Kind := zctArray;
  429                     Typ.TheArray := A;
  430                  .)
  431  
  432           [ Expr<SizeOp> (.
  433              SizeOp := SizeOp.Optimize;
  434              if SizeOp.Kind<>zcConstLiteral then
  435                ZError('Array size must be a constant expression');
  436              A.SizeDim1 := Trunc( (SizeOp as TZcOpLiteral).Value );
  437                           .)
  438           ]
  439  
  440           { ","  (. if A.Dimensions=High(TArrayDimensions) then ZError('Too many array dimensions'); Inc(A.Dimensions); .)
  441             [ Expr<SizeOp> (.
  442                  SizeOp := SizeOp.Optimize;
  443                  if SizeOp.Kind<>zcConstLiteral then
  444                    ZError('Array size must be a constant expression');
  445                 I := Trunc( (SizeOp as TZcOpLiteral).Value );
  446                 if (A.Dimensions=dadTwo) then A.SizeDim2 := I else A.SizeDim3 := I;
  447             .) ]
  448           }
  449         "]"
  450      )
  451    }
  452  .
  453  
  454  /*------------------------------------------------------------------------*/
  455  
  456  SimpleType<var Typ : TZcDataType>
  457  (.
  458    var
  459      A : TDefineArray;
  460  .)
  461  /* = IntType | "float" | "double" | "decimal" | "bool" */
  462  = "float" (. Typ.Kind := zctFloat; .)
  463    | "int" (. Typ.Kind := zctInt; .)
  464    | "byte" (. Typ.Kind := zctByte; .)
  465    | "string" (. Typ.Kind := zctString; .)
  466    | "model" (. Typ.Kind := zctModel; .)
  467    | "xptr" (. Typ.Kind := zctXptr; .)
  468  
  469    | "mat4" (.
  470       A := Prototypes.Mat4Array;
  471       Typ.Kind := zctMat4;
  472       Typ.TheArray := A;
  473      .)
  474    | "vec2" (.
  475       A := Prototypes.Vec2Array;
  476       Typ.Kind := zctVec2;
  477       Typ.TheArray := A;
  478    .)
  479    | "vec3" (.
  480       A := Prototypes.Vec3Array;
  481       Typ.Kind := zctVec3;
  482       Typ.TheArray := A;
  483    .)
  484    | "vec4" (.
  485       A := Prototypes.Vec4Array;
  486       Typ.Kind := zctVec4;
  487       Typ.TheArray := A;
  488    .)
  489  
  490    /* Changes below also must be made in homographs-section */
  491    | "Material" (. Typ.Kind := zctReference; Typ.ReferenceClassId := MaterialClassId; .)
  492    | "Sound" (. Typ.Kind := zctReference; Typ.ReferenceClassId := SoundClassId; .)
  493    | "Shader" (. Typ.Kind := zctReference; Typ.ReferenceClassId := ShaderClassId; .)
  494    | "Bitmap" (. Typ.Kind := zctReference; Typ.ReferenceClassId := ZBitmapClassId; .)
  495    | "Mesh" (. Typ.Kind := zctReference; Typ.ReferenceClassId := MeshClassId; .)
  496    | "Camera" (. Typ.Kind := zctReference; Typ.ReferenceClassId := CameraClassId; .)
  497    | "Font" (. Typ.Kind := zctReference; Typ.ReferenceClassId := FontClassId; .)
  498    | "Sample" (. Typ.Kind := zctReference; Typ.ReferenceClassId := SampleClassId; .)
  499    | "File" (. Typ.Kind := zctReference; Typ.ReferenceClassId := ZFileClassId; .)
  500  .
  501  
  502  /*------------------------------------------------------------------------*/
  503  
  504  /* IntType
  505  = "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char"
  506  . */
  507  
  508  
  509  ConstantDeclarationList
  510  (.
  511  var
  512    Typ : TZcDataType;
  513  .)
  514  = "const" Type<Typ> ConstantDeclaration<Typ> {"," ConstantDeclaration<Typ> }
  515    ";"
  516  .
  517  
  518  ConstantDeclaration<var Typ : TZcDataType>
  519  (.
  520  var
  521    Cns : TDefineConstant;
  522    Op : TZcOp;
  523    Lit : TZcOpLiteral;
  524    CnsName : string;
  525  .)
  526  =
  527  ident (. CnsName := LexString; .) "=" Expr<Op>
  528    (.
  529     if Typ.Kind not (in [zctByte,zctInt,zctFloat,zctString]) then
  530       ZError('Only byte, int, float and string constants are allowed');
  531  
  532     Op := Op.Optimize;
  533     if not (Op is TZcOpLiteral) then
  534       ZError('Constant expression expected: ' + Op.ToString);
  535  
  536     Lit := Op as TZcOpLiteral;
  537  
  538     if Lit.Typ.Kind<>Typ.Kind then
  539       ZError('Constant expression is not of the expected type: ' + Op.ToString);
  540  
  541     Cns := TDefineConstant.Create(nil);
  542     Cns.SetString('Name',AnsiString(CnsName));
  543     GlobalNames.Add(Cns);
  544  
  545     case Typ.Kind of
  546       zctByte:
  547         begin
  548           Cns._Type := zctByte;
  549           Cns.ByteValue := Round(Lit.Value);
  550         end;
  551       zctInt:
  552         begin
  553           Cns._Type := zctInt;
  554           Cns.IntValue := Round(Lit.Value);
  555         end;
  556       zctFloat:
  557         begin
  558           Cns._Type := zctFloat;
  559           Cns.Value := Lit.Value;
  560         end;
  561       zctString:
  562         begin
  563           Cns._Type := zctString;
  564           Cns.SetString('StringValue',AnsiString(Lit.StringValue));
  565         end;
  566       else
  567         ZError('Wrong type of constant expression: ' + GetZcTypeName(Typ));
  568     end;
  569     SymTab.Add(CnsName,Cns);
  570    .)
  571  /* {"," ident "=" Expr<Op>} */
  572  .
  573  
  574  /*------------------------------------------------------------------------*
  575   *------------------------------ Statements ------------------------------*
  576   *------------------------------------------------------------------------*/
  577  
  578  Statement<var OutOp : TZcOp>
  579  = (. OutOp := nil; .)
  580  
  581  ConstantDeclarationList
  582  
  583  /*IF IsLocalVarDecl THEN
  584  BEGIN
  585    LocalVarDecl ";"
  586  END
  587  |  EmbeddedStatement<OutOp> */
  588  
  589  | LocalVarDecl<OutOp> ";"
  590  | EmbeddedStatement<OutOp>
  591    /* LL(1) confict between LocalVarDecl and StatementExpr: *
  592     * ident {"." ident} { "[" ...                           */
  593  .
  594  
  595  /*------------------------------------------------------------------------*/
  596  EmbeddedStatement<var OutOp : TZcOp>
  597    (. var
  598         SwitchValueOp,Op,IfOp,IfBody,ElseOp : TZcOp;
  599         ForInitOp,ForCondOp,ForIncOp,ForBodyOp : TZcOp;
  600         WhileCondOp,WhileBodyOp : TZcOp;
  601         SwitchOp : TZcOpSwitch;
  602         Loc : TZcOpLocalVar;
  603    .)
  604  = Block<OutOp>
  605  | ";"   (. OutOp := MakeOp(zcNop); .)
  606  | StatementExpr<OutOp> ";"
  607  | "if" (. ElseOp := nil; .)
  608    "(" Expr<IfOp> ")" EmbeddedStatement<IfBody> ["else" EmbeddedStatement<ElseOp>]
  609          (. OutOp := MakeOp(zcIf,[IfOp,IfBody,ElseOp]); .)
  610   | "switch" "(" Expr<SwitchValueOp> ")"
  611        (.
  612           Loc := MakeTemp(SwitchValueOp.GetDataType.Kind);
  613           SymTab.Add(Loc.Id,Loc);
  614           CurrentFunction.AddLocal(Loc);
  615  
  616           OutOp := MakeOp(zcBlock);
  617           OutOp.Children.Add( MakeAssign(atAssign, MakeOp(zcIdentifier,Loc.Id),SwitchValueOp) );
  618  
  619           SwitchOp := TZcOpSwitch.Create(nil);
  620           SwitchOp.ValueOp := MakeIdentifier(Loc.Id);
  621           OutOp.Children.Add(SwitchOp);
  622        .)
  623     "{" {
  624       (. SwitchOp.CaseOps.Add( MakeOp(zcNop) ); SwitchOp.StatementsOps.Add( MakeOp(zcNop) ); .)
  625       SwitchSection<SwitchOp>
  626     } "}"
  627   | "while"
  628       (. try
  629           SymTab.PushScope;
  630           WhileCondOp := nil; WhileBodyOp := nil; .)
  631     "(" Expr<WhileCondOp> ")" EmbeddedStatement<WhileBodyOp>
  632     (.
  633           OutOp := MakeOp(zcWhile,[WhileCondOp,WhileBodyOp]);
  634         finally
  635           SymTab.PopScope;
  636         end;
  637     .)
  638   /* | "do" EmbeddedStatement<Op> "while" "(" Expr<Op> ")" ";" */
  639   | "for"
  640      (. try
  641           SymTab.PushScope;
  642           ForInitOp :=nil; ForCondOp := nil; ForIncOp := nil; .)
  643     "(" [ForInit<ForInitOp>] ";" [Expr<ForCondOp>] ";" [ForInc<ForIncOp>] ")" EmbeddedStatement<ForBodyOp>
  644     (.
  645           OutOp := MakeOp(zcForLoop,[ForInitOp,ForCondOp,ForIncOp,ForBodyOp]);
  646         finally
  647           SymTab.PopScope;
  648         end;
  649     .)
  650  /* | "foreach" "(" Type ident "in" Expr<Op> ")" EmbeddedStatement<Op> */
  651   | "break" ";"    (. OutOp := MakeOp(zcBreak); .)
  652   | "continue" ";" (. OutOp := MakeOp(zcContinue); .)
  653   | (. Op := nil; .) "return" [ Expr<Op> ] ";"
  654      (.
  655          if (Op=nil) then
  656          begin
  657            if CurrentFunction.ReturnType.Kind<>zctVoid then
  658              SynError(202)
  659            else
  660              OutOp := MakeOp(zcReturn);
  661          end else
  662          begin
  663            if CurrentFunction.ReturnType.Kind=zctVoid then
  664              SynError(203)
  665            else
  666              OutOp := MakeOp(zcReturn,[ MakeCompatible(Op,CurrentFunction.ReturnType) ]);
  667          end;
  668      .)
  669  .
  670  /*------------------------------------------------------------------------*/
  671  
  672  Block<var OutOp : TZcOp>
  673    (. var
  674         Op : TZcOp;
  675    .)
  676  = (. Op := nil;
  677       OutOp := MakeOp(zcBlock);
  678    .)
  679    "{" {Statement<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) } "}".
  680  
  681  /*------------------------------------------------------------------------*/
  682  StatementExpr<var OutOp : TZcOp>           (. var Op1,Op2 : TZcOp; Kind : TZcAssignType; .)
  683  = (. Op1 :=nil; Op2 := nil; .)
  684    Unary<Op1>
  685    ( AssignOp<Kind> Expr<Op2>
  686      (.
  687        if Op2<>nil then
  688          OutOp := MakeAssign(Kind,Op1,Op2);
  689      .)
  690    |                             (. OutOp := Op1; .)
  691    )
  692  .
  693  
  694  /*------------------------------------------------------------------------*/
  695  AssignOp<var Kind : TZcAssignType>
  696  = "="     (. Kind := atAssign; .)
  697    | "+="  (. Kind := atPlusAssign; .)
  698    | "-="  (. Kind := atMinusAssign; .)
  699    | "*="  (. Kind := atMulAssign; .)
  700    | "/="  (. Kind := atDivAssign; .)
  701  /*  | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" */
  702  .
  703  
  704  /*------------------------------------------------------------------------*/
  705  
  706  SwitchSection<SwitchOp : TZcOpSwitch> (. var Op : TZcOp; .)
  707  = (. Op := nil; .)
  708    SwitchLabel<Op>   (. AddSwitchLabel(SwitchOp,Op); .)
  709    {
  710      SwitchLabel<Op> (. AddSwitchLabel(SwitchOp,Op); .)
  711    }
  712    Statement<Op>    (. if Assigned(Op) then SwitchOp.StatementsOps.Last.Children.Add(Op); .)
  713    {
  714       Statement<Op> (. if Assigned(Op) then SwitchOp.StatementsOps.Last.Children.Add(Op); .)
  715    }
  716  .
  717  
  718  /*------------------------------------------------------------------------*/
  719  
  720  SwitchLabel<var OutOp : TZcOp>
  721  = "case" Expr<OutOp> ":"
  722  | "default" ":"
  723  .
  724  
  725  /*------------------------------------------------------------------------*/
  726  
  727  ForInit<var OutOp : TZcOp>     (. var Op : TZcOp; .)
  728  = (. Op:=nil; OutOp := MakeOp(zcBlock); .)
  729  (
  730  LocalVarDecl<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .)
  731  | (. Op:=nil; .) StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .)
  732    { (. Op:=nil; .) "," StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) }
  733  )
  734  .  
  735  
  736  /*------------------------------------------------------------------------*/
  737  
  738  ForInc<var OutOp : TZcOp>      (. var Op : TZcOp; .)
  739  = (. Op:=nil; 
  740       OutOp := MakeOp(zcBlock);
  741    .) 
  742  (
  743  StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) 
  744  { (. Op:=nil; .) "," StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) }
  745  )
  746  . 
  747  
  748  
  749  /*------------------------------------------------------------------------*
  750   *----------------------------- Expressions ------------------------------*
  751   *------------------------------------------------------------------------*/
  752  
  753  
  754  Expr<var OutOp : TZcOp>   (. var Op1,Op2 : TZcOp; Kind : TZcAssignType; .)
  755  = (. Op1 :=nil; Op2 := nil; .)
  756    Unary<Op1>
  757    ( OrExpr<Op1,OutOp>
  758        ["?" Expr<Op1> ":" Expr<Op2>
  759           (. if (OutOp=nil) or (Op1=nil) or (Op2=nil) then
  760                SynError(205)
  761              else
  762                OutOp := MakeOp(zcConditional,[OutOp,Op1, MakeCompatible(Op2,Op1.GetDataType) ]);
  763           .)
  764        ]
  765    | AssignOp<Kind> Expr<Op2>    (. OutOp := MakeAssign(Kind,Op1, Op2); .)
  766    )
  767  .
  768  /*------------------------------------------------------------------------*/
  769  OrExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  770  = AndExpr<InOp,OutOp>   (. L := OutOp; .)
  771      {"||" Unary<Op> AndExpr<Op,R>
  772        (. OutOp := MakeOp(zcOr,[L,R]);
  773           L := OutOp; .)
  774      }
  775  .
  776  
  777  
  778  /*------------------------------------------------------------------------*/
  779  AndExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  780  = BitOrExpr<InOp,OutOp>  (. L := OutOp; .)
  781      {"&&" Unary<Op> BitOrExpr<Op,R>
  782        (. OutOp := MakeOp(zcAnd,[L,R]);
  783           L := OutOp; .)
  784      }
  785  .
  786  /*------------------------------------------------------------------------*/
  787  BitOrExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  788  = BitXorExpr<InOp,OutOp> (. L := OutOp; .)
  789    {"|" Unary<Op> BitXorExpr<Op,R>
  790      (. OutOp := MakeOp(zcBinaryOr,[L,R]);
  791         L := OutOp; .)
  792    }
  793  .
  794  
  795  /*------------------------------------------------------------------------*/
  796  BitXorExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  797  = BitAndExpr<InOp,OutOp> (. L := OutOp; .)
  798    {"^" Unary<Op> BitAndExpr<Op,R>
  799      (. OutOp := MakeOp(zcBinaryXor,[L,R]);
  800         L := OutOp; .)
  801    }
  802  .
  803  
  804  /*------------------------------------------------------------------------*/
  805  BitAndExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  806  = EqlExpr<InOp,OutOp> (. L := OutOp; .)
  807    {"&" Unary<Op> EqlExpr<Op,R>
  808      (. OutOp := MakeOp(zcBinaryAnd,[L,R]);
  809         L := OutOp; .)
  810    }
  811  .
  812  
  813  /*------------------------------------------------------------------------*/
  814  EqlExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; Kind : TZcOpKind; .)
  815  = RelExpr<InOp,OutOp> (. L := OutOp; Kind := zcNop; .)
  816    {( "!="   (. Kind := zcCompNE; .)
  817     | "=="   (. Kind := zcCompEQ; .)
  818     )
  819     Unary<Op> RelExpr<Op,R>
  820           (. OutOp := MakeBinary(Kind, L,R);
  821              L := OutOp;
  822           .)
  823    }
  824  .
  825  /*------------------------------------------------------------------------*/
  826  RelExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp;  Kind : TZcOpKind; .)
  827  = ShiftExpr<InOp,OutOp> (. L := OutOp; Kind := zcNop; .)
  828    { ( "<"       (. Kind := zcCompLT; .)
  829      | ">"       (. Kind := zcCompGT; .)
  830      | "<="      (. Kind := zcCompLE; .)
  831      | ">="      (. Kind := zcCompGE; .)
  832       )
  833      Unary<Op> ShiftExpr<Op,R>
  834           (. OutOp := MakeBinary(Kind, L,R );
  835              L := OutOp;
  836           .)
  837    }
  838  .
  839  /*------------------------------------------------------------------------*/
  840  ShiftExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; Kind : TZcOpKind; .)
  841  = AddExpr<InOp,OutOp> (. L := OutOp; Kind := zcNop; .)
  842    { ("<<"  (. Kind := zcBinaryShiftL; .)
  843      | ">>" (. Kind := zcBinaryShiftR; .)
  844      )
  845      Unary<Op> AddExpr<Op,R>
  846      (. OutOp := MakeOp(Kind,[L,R]);
  847         L := OutOp; .)
  848    }
  849  .
  850  /*------------------------------------------------------------------------*/
  851  AddExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp;  Kind : TZcOpKind;.)
  852  = MulExpr<InOp,OutOp>   (. L := OutOp; Kind := zcNop; .)
  853      {( "+"    (. Kind := zcPlus; .)
  854       | "-"    (. Kind := zcMinus; .)
  855       ) Unary<Op> MulExpr<Op,R>
  856           (. 
  857              if (L=nil) or (R=nil) then
  858                ZError('Invalid syntax');
  859              OutOp := MakeBinary(Kind,L,R);
  860              L := OutOp;
  861           .)
  862      }
  863  .
  864  /*------------------------------------------------------------------------*/
  865  MulExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Tmp : TZcOp; Kind : TZcOpKind; .)
  866  = (. OutOp := InOp; Kind := zcNop; .)
  867    { ("*"      (. Kind := zcMul; .)
  868      | "/"     (. Kind := zcDiv; .)
  869      | "%"     (. Kind := zcMod; .)
  870      ) Unary<Tmp>
  871           (. OutOp := MakeBinary(Kind,InOp,Tmp);
  872              InOp := OutOp;
  873           .)
  874      }
  875  .
  876  /*------------------------------------------------------------------------*/
  877  Unary<var OutOp : TZcOp>         (. var LastOp,Tmp : TZcOp; Kind : TZcOpKind; .)
  878  =       (. LastOp := nil; Kind := zcNop; .)
  879    {
  880      (
  881        /* "+" | */
  882        "-"   (. Kind := zcNegate; .) |
  883        "++"  (. Kind := zcPreInc; .) |    
  884        "--"  (. Kind := zcPreDec; .) |
  885        "!"   (. Kind := zcNot; .)
  886        /* | "~" | "*" */
  887      )
  888      (.
  889         if Kind in [zcNegate,zcNot] then
  890         begin
  891           Tmp := MakeOp(Kind);
  892           if LastOp<>nil then
  893             LastOp.Children.Add(Tmp);
  894           LastOp := Tmp;
  895         end else if Assigned(LastOp) then
  896           ZError('-- and ++ cannot be combined with other unary ops');
  897      .)
  898    }
  899    Primary<Tmp>
  900      (.
  901         if Kind in [zcNop,zcNegate,zcNot] then
  902         begin
  903           if LastOp<>nil then
  904           begin
  905             LastOp.Children.Add(Tmp);
  906             OutOp := LastOp;
  907           end else
  908             OutOp := Tmp;
  909         end else
  910         begin
  911           OutOp := MakePrePostIncDec(Kind,Tmp);
  912         end;
  913      .)
  914  .
  915  
  916  
  917  
  918  /*------------------------------------------------------------------------*/
  919  InvokeArgument<var OutOp : TZcOp; Ci : TZComponentInfo>
  920  (.
  921    var
  922      Op : TZcOp;
  923      Prop : TZProperty;
  924  .)
  925  = (. OutOp := nil; Op := nil; .)
  926    ident (.
  927      Prop := Ci.GetProperties.GetByName(LexString);
  928      if Prop=nil then
  929        ZError(LexString + ' is not a property of ' + Ci.ZClassName);
  930      if not (Prop.PropertyType in [zptFloat,zptInteger,zptByte,zptBoolean,zptString,zptComponentRef]) then
  931        ZError(LexString + ' property of ' + Ci.ZClassName + ' is of a datatype that cannot be set using inline component invokation syntax');
  932      OutOp := MakeOp(zcIdentifier);
  933      OutOp.Id := LexString;
  934    .)
  935    ":" Expr<Op>
  936    (. if Op=nil then
  937         ZError('Missing argument');
  938       Op := MakeCompatible(Op, PropTypeToZType(Prop.PropertyType));
  939       OutOp.Children.Add(Op);
  940    .)
  941  .
  942  
  943  
  944  /*------------------------------------------------------------------------*/
  945  ReinterpretCast<var OutOp : TZcOp>
  946  (.
  947  var
  948    Op : TZcOp;
  949    Typ : TZcDataType;
  950  .)
  951  = "reinterpret_cast" "<" SimpleType<Typ> ">"
  952    "(" Expr<Op> ")"
  953    (.
  954       OutOp := TZcOpReinterpretCast.Create(nil);
  955       OutOp.Children.Add(Op);
  956       (OutOp as TZcOpReinterpretCast).Typ := Typ;
  957    .)
  958  .
  959  
  960  /*------------------------------------------------------------------------*/
  961  InlineComponent<var OutOp : TZcOp>
  962  (. var Op : TZcOp;
  963       Ci : TZComponentInfo;
  964  .)
  965  =  (. OutOp := nil;
  966        IsInInvokeArg := True;
  967     .)
  968     "@" ident (.
  969         Ci := ComponentManager.GetInfoFromName(LexString);
  970         OutOp := TZcOpInvokeComponent.Create(nil);
  971         OutOp.Id := LexString;
  972      .)
  973      "("
  974          [InvokeArgument<Op,Ci>       (. OutOp.Children.Add(Op); .)
  975            {"," InvokeArgument<Op,Ci> (. OutOp.Children.Add(Op); .)
  976            }
  977          ]
  978      ")" (. IsInInvokeArg := False; .)
  979  .
  980  
  981  /*------------------------------------------------------------------------*/
  982  Primary<var OutOp : TZcOp>
  983  (. var Op : TZcOp; S : string; V : double;
  984       Typ : TZcDataType;
  985  .)
  986  =            (. OutOp := nil; .)
  987    (
  988      ident    (. OutOp := CheckPrimary( MakeIdentifier(LexString) );  .)
  989    | InlineComponent<OutOp>
  990    | Literal<Typ>  (.
  991          if Typ.Kind in [zctString,zctNull] then
  992            OutOp := TZcOpLiteral.Create(Typ.Kind,LexString)
  993          else
  994          begin
  995            try
  996              S := LexString;
  997              V := ZcStrToFloat(S);
  998              OutOp := TZcOpLiteral.Create(Typ.Kind,V)
  999            except on EConvertError do
 1000              SynError(200);
 1001            end;
 1002          end;
 1003       .)
 1004    | "(" Expr<OutOp> ")"
 1005  /*  | ( "bool"   | "byte"   | "char" | "decimal" | "double"
 1006      | "float"  | "int"    | "long" | "object"  | "sbyte"
 1007      | "short"  | "string" | "uint" | "ulong"   | "ushort"
 1008      ) "." ident */
 1009    | ReinterpretCast<OutOp>
 1010    )
 1011  
 1012    {
 1013    "++" (. OutOp := MakePrePostIncDec(zcPostInc,OutOp); .)
 1014    | "--" (. OutOp := MakePrePostIncDec(zcPostDec,OutOp); .)
 1015  
 1016  /*  | "->" ident */
 1017  
 1018    | "." (. IsInIdent := True; .) ident (.
 1019  
 1020        if not (OutOp.Kind in [zcIdentifier,zcSelect,zcFuncCall,zcArrayAccess]) then
 1021          ZError('Invalid use of "."');
 1022  
 1023        Op := MakeOp(zcSelect,LexString);
 1024        Op.Children.Add(OutOp);
 1025  
 1026        OutOp := CheckPrimary(Op);
 1027  
 1028        IsInIdent := False;
 1029  
 1030      .)
 1031  
 1032    | "(" (.
 1033             if (OutOp=nil) or (OutOp.Kind<>zcIdentifier) then
 1034               ZError('Unexpected "("');
 1035             OutOp.Kind:=zcFuncCall;
 1036           .)
 1037          [Argument<Op> (. OutOp.Children.Add(Op); .)
 1038            {"," Argument<Op> (. OutOp.Children.Add(Op); .)
 1039            }
 1040          ]
 1041          (.
 1042             if not VerifyFunctionCall(OutOp,S) then
 1043               ZError(S);
 1044          .)
 1045      ")"
 1046  
 1047    | "[" (.
 1048             if (OutOp=nil) or (not (OutOp.Kind in [zcIdentifier,zcSelect,zcArrayAccess,zcFuncCall])) then
 1049               ZError('Unexpected "["');
 1050             Op := MakeArrayAccess(OutOp);
 1051             OutOp := Op;
 1052           .)
 1053  
 1054          Expr<Op> (. OutOp.Children.Add( MakeCompatible(Op,zctInt) ); .)
 1055            {"," Expr<Op> (. OutOp.Children.Add( MakeCompatible(Op,zctInt) ); .) }
 1056          "]"
 1057    }
 1058  .
 1059  /*------------------------------------------------------------------------*/
 1060  Literal<var Typ : TZcDataType>
 1061  = intCon (. Typ.Kind :=zctInt; .) |
 1062    realCon (. Typ.Kind := zctFloat; .) |
 1063    stringCon (. Typ.Kind := zctString; .)
 1064    | "null" (. Typ.Kind := zctNull; .)
 1065    /* | "true" | "false"  */
 1066  .
 1067  
 1068  END Zc.



